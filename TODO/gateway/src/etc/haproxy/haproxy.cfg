# adapted from /boilerplate/configs/etc/haproxy/haproxy.cfg

global
  # enable core dumps
  set-dumpable
  # you MUST start as root to enable droping down to a less-priviledged user
  # user haproxy
  # group haproxy
  log stdout local0
  stats socket 127.0.0.1:9999 level admin expose-fd listeners
  ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  ssl-default-bind-options no-sslv3 no-tls-tickets
  ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  ssl-default-server-options no-sslv3 no-tls-tickets

  # New strict-limits
  strict-limits
  # New directive to support misconfigured servers
  h1-case-adjust cache-control CaChE-CoNtRoL

defaults
  mode http
  log global
  timeout client 1s
  timeout server 1s
  timeout connect 1s
  option redispatch
  option httplog

# program whoami
#     # Prints username 'haproxy' to logs
#     command /usr/bin/whoami
#     # New user and group directives
#     user haproxy
#     group haproxy


# userlist api
#   user admin password $5$aVnIFECJ$2QYP64eTTXZ1grSjwwdoQxK/AP8kcOflEO1Q5fc.5aA

frontend stats
  bind *:8404
  # Enable Prometheus Exporter
  # http-request use-service prometheus-exporter if { path /metrics }
  stats enable
  stats uri /stats
  stats refresh 10s

# TODO should only run in dev
# frontend react_devtools
#   bind 127.0.0.1:8097
#   http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10  }
#   default_backend packages_client


frontend api_gateway
  bind 0.0.0.0:7777
  # bind :443 tfo ssl crt /etc/haproxy/certs/www.example.com.pem alpn h2,http/1.1

  # Enable log sampling
  # One out of 10 requests would be logged to this source
  log 127.0.0.1:10001 sample 1:10 local0
  # For every 11 requests, log requests 2, 3, and 8-11
  log 127.0.0.1:10002 sample 2-3,8-11:11 local0

  # Log profiling data
  log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r cpu_calls:%[cpu_calls] cpu_ns_tot:%[cpu_ns_tot] cpu_ns_avg:%[cpu_ns_avg] lat_ns_tot:%[lat_ns_tot] lat_ns_avg:%[lat_ns_avg]"

  # gRPC path matching
  # acl is_grpc_codename path /CodenameCreator/KeepGettingCodenames
  # Dynamic 'do-resolve' trusted hosts
  # acl dynamic_hosts req.hdr(Host) api.local admin.local haproxy.com

  # TODO: throw error on this instead
  # some clients may expose data on the redirect
  # Redirect if not SSL
  # http-request redirect scheme https unless { ssl_fc }


  # Enable rate limiting
  # Return 429 Too Many Requests if client averages more than
  # 10 requests in 10 seconds.
  # (duration defined in stick table in peers section)
  http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10  }


  # Route PHP requests to FastCGI app
  use_backend packages_pkgcheck if { path_beg /v1 }

  default_backend packages_client


backend packages_client
  # default-server ssl verify none alpn h2 check maxconn 50
  # Enable Power of Two Random Choices Algorithm
  # balance random(2)
  # Enable Layer 7 retries
  retry-on all-retryable-errors
  retries 3

  # retrying POST requests can be dangerous
  # make sure you understand the implications before removing
  http-request disable-l7-retry if METH_POST

  server server1 127.0.0.1:8080

  # New fetch methods:
  http-response add-header SERVER_NAME "%[srv_name]"
  http-response add-header SERVER_QUEUE "%[srv_queue(server1)]"
  http-response add-header UUID "%[uuid]"


backend packages_pkgcheck
  server server1 127.0.0.1:3000
