"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _utils = require("@nodeproto/utils");

var _esbuild = _interopRequireDefault(require("esbuild"));

var _fs = _interopRequireDefault(require("fs"));

var _esbuildPluginManifest = _interopRequireDefault(require("esbuild-plugin-manifest"));

var _path = _interopRequireDefault(require("path"));

var _package = _interopRequireDefault(require("../package.json"));

var _module = require("module");

const appInputFilename = 'index';
const appExtension = '.mjs';
const appId = appInputFilename + appExtension;
const manifestFilename = 'manifest.json';

const outdir = _path.default.resolve('dist');

const manifestUri = outdir + '/' + manifestFilename;
const conditions = process.execArgv.filter(x => x.startsWith('--conditions'));
const isBuild = !!conditions.filter(x => x.endsWith('build')).length;
const isDev = !isBuild;
let servers = undefined;

const stopDev = async () => isDev && servers?.length && servers.forEach(s => s.close());

const startDev = async () => {
  if (isBuild) return;
  await stopDev();
  const newServers = await _fs.default.promises.readFile(manifestUri, 'utf-8').then(manifest => Promise.resolve(`${'../' + JSON.parse(manifest)[appInputFilename]}`).then(s => (0, _interopRequireWildcard2.default)(require(s))));
  if (newServers) servers = await newServers.runApp();
};

const buildLogAndDevOrStop = ({
  errors,
  warnings,
  ...result
}) => {
  console.info('\n\n finished build\n', Object.keys(result.metafile.outputs));
  if (errors.length || warnings.length) console.warn('\n\n build notifications', {
    errors,
    warnings
  });
  if (isDev) startDev();else if (isBuild) result.stop();
};

const popCopyConfig = {
  options: [{
    indir: (await _utils.fsproto.resolve('../app', import.meta.url)).replace('file://', ''),
    outdir,
    endingWith: /openapi\.(yml|yaml)$/,
    recurse: true
  }]
};
const manifestPluginConfig = {
  hash: false,
  shortNames: false,
  extensionless: 'input',
  filename: manifestFilename
};
const esbuildConfig = {
  assetNames: 'assets/[name]-[hash]',
  bundle: true,
  define: _utils.envproto.syncEnv(_package.default).processEnv,
  entryNames: isDev ? '[name]-[hash]' : '[name]',
  entryPoints: [appId],
  external: _module.builtinModules,
  metafile: true,
  minify: false,
  outdir,
  outExtension: {
    '.js': '.cjs'
  },
  platform: 'node',
  resolveExtensions: ['.mjs', '.js', '.cjs', '.json'],
  sourcemap: true,
  target: ['node14.17.0'],
  write: true,
  plugins: [_utils.esproto.popCopy(popCopyConfig), (0, _esbuildPluginManifest.default)(manifestPluginConfig)],
  watch: {
    async onRebuild(error, result) {
      buildLogAndDevOrStop(result);
      if (error) console.error(error);
    }

  }
};
const buildResult = await _esbuild.default.build(esbuildConfig);
isBuild && buildLogAndDevOrStop(buildResult);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,