"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = setupWebpack;

var _module = require("module");

var _fs = require("fs");

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

const throwMsg = (msg, prefix = 'error in setup.webpack.config: ') => {
  throw new Error(`${prefix}${msg}`);
};

const createCacheGroups = vendors => ({
  babel: { ...vendors,
    idHint: '3',
    priority: -8,
    test: /[\\/]node_modules[\\/].*babel.*[\\/]/
  },
  default: {
    idHint: '6',
    minChunks: 2,
    priority: -20,
    reuseExistingChunk: true
  },
  etc: { ...vendors,
    idHint: '5',
    priority: -10,
    test: /[\\/]node_modules[\\/]/
  },
  react: { ...vendors,
    idHint: '4',
    priority: -9,
    test: /[\\/]node_modules[\\/].*react.*[\\/]/
  },
  styled: { ...vendors,
    idHint: '1',
    priority: -6,
    test: /[\\/]node_modules[\\/](animate|normalize|styled|milligram).*[\\/]/
  },
  support: { ...vendors,
    idHint: '2',
    priority: -7,
    test: /[\\/]node_modules[\\/](reakit|react-aria|@reach).*[\\/]/
  }
});

function setupWebpack({
  context = process.cwd(),
  IS_DEV = false,
  IS_PROD = false,
  NODE_ENV = 'development',
  PATH_DIST = '',
  PATH_SRC = '',
  pkgJsonPath = './package.json',
  ...overrides
} = {}) {
  const r = (f = throwMsg('cant find file', 'error in webpack/setup.webpack.config.mjs.r: '), c = context) => _path.default.resolve(c, f);

  const getFile = (f = throwMsg('pathOnDisk', 'error in webpack/setup.webpack.config.mjs.getFile: ')) => (0, _fs.readFileSync)(r(f, context), 'utf8');

  const pkgJson = JSON.parse(getFile(pkgJsonPath));
  const pathDist = r(PATH_DIST || pkgJson.config.PATH_DIST);
  const pathSrc = r(PATH_SRC || pkgJson.config.PATH_SRC);
  const mode = NODE_ENV || pkgJson.config.NODE_ENV;
  const ifProd = IS_PROD || mode === 'production';
  const ifDev = IS_DEV || !ifProd;
  const terserPlugin = [() => ({
    extractComments: false,
    include: [pathDist],
    parallel: _os.default.cpus().length - 1 || 1,
    terserOptions: {
      format: {
        comments: false
      },
      keep_classnames: true,
      mangle: ifProd,
      module: false,
      toplevel: false
    },
    test: /\.(m|c)+js$/i
  })];
  const minSize = 20000;
  const maxSize = minSize * 6;
  const vendors = {
    chunks: 'all',
    enforce: true,
    filename: 'js/[name]/bundle.js',
    reuseExistingChunk: true
  };
  const splitChunks = {
    cacheGroups: createCacheGroups(vendors),
    chunks: 'all',
    enforceSizeThreshold: 50000,
    maxAsyncRequests: 30,
    maxAsyncSize: maxSize,
    maxInitialRequests: 30,
    maxInitialSize: maxSize,
    maxSize,
    minChunks: 1,
    minRemainingSize: minSize,
    minSize,
    name: false,
    usedExports: true
  };
  const optimization = {
    chunkIds: ifProd ? 'deterministic' : 'named',
    concatenateModules: true,
    emitOnErrors: true,
    flagIncludedChunks: true,
    innerGraph: true,
    mangleExports: ifProd,
    mergeDuplicateChunks: true,
    minimize: ifProd,
    minimizer: ifProd ? terserPlugin : undefined,
    moduleIds: ifProd ? 'deterministic' : 'named',
    nodeEnv: mode,
    portableRecords: true,
    providedExports: true,
    realContentHash: ifProd,
    removeAvailableModules: true,
    removeEmptyChunks: true,
    runtimeChunk: {
      name: 'runtime'
    },
    sideEffects: true,
    splitChunks,
    usedExports: true
  };
  return {
    config: {
      context,
      mode,
      optimization,
      ...overrides
    },
    pack: {
      builtinModules: _module.builtinModules,
      getFile,
      ifDev,
      ifProd,
      pathDist,
      pathSrc,
      pkgJson,
      resolve: r
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,