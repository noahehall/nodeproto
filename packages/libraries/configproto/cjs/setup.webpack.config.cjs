"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.optimization = exports.throwMsg = exports.ifProd = exports.ifDev = exports.mode = exports.pathSrc = exports.pathDist = exports.env = exports.context = exports.babelConfigDefault = exports.builtinModules = void 0;

var _utils = require("@nodeproto/utils");

var _path = _interopRequireDefault(require("path"));

var _wtf = _interopRequireDefault(require("@nodeproto/wtf"));

var _os = _interopRequireDefault(require("os"));

var _module = require("module");

exports.builtinModules = _module.builtinModules;

var _babelConfig = _interopRequireDefault(require("./babel.config.cjs"));

exports.babelConfigDefault = _babelConfig.default;

const pkgJson = _wtf.default.fs.readJsonSync('./package.json');

const context = process.cwd();
exports.context = context;

const env = _utils.envproto.syncEnvAndConfig(pkgJson);

exports.env = env;

const pathDist = _path.default.resolve(context, env.directories.dist);

exports.pathDist = pathDist;

const pathSrc = _path.default.resolve(context, env.directories.app);

exports.pathSrc = pathSrc;
const mode = env.config.NODE_ENV;
exports.mode = mode;
const ifDev = mode === 'development';
exports.ifDev = ifDev;
const ifProd = mode === 'production';
exports.ifProd = ifProd;
const prefix = 'error in pack:';

const throwMsg = msg => {
  throw new Error(`${prefix} ${msg}`);
}; // @see https://stackoverflow.com/questions/66343602/use-latest-terser-webpack-plugin-with-webpack5


exports.throwMsg = throwMsg;
const terserPlugin = [() => ({
  test: /\.(m|c)+js$/i,
  include: [pkgJson.directories.app],
  extractComments: false,
  parallel: _os.default.cpus().length - 1 || 1,
  // @see https://github.com/terser/terser#minify-options
  terserOptions: {
    format: {
      comments: false
    },
    keep_classnames: true,
    mangle: ifProd,
    module: false,
    // TODO: when enabling module + nomodule output
    toplevel: false
  }
})];
const minSize = 20000;
const maxSize = minSize * 6;
const vendors = {
  chunks: 'all',
  enforce: true,
  filename: 'js/[name]/bundle.js',
  reuseExistingChunk: true
};
const splitChunks = {
  chunks: 'all',
  enforceSizeThreshold: 50000,
  maxAsyncRequests: 30,
  maxInitialRequests: 30,
  maxAsyncSize: maxSize,
  maxInitialSize: maxSize,
  maxSize,
  minChunks: 1,
  name: false,
  usedExports: true,
  minRemainingSize: minSize,
  // to mirror prod
  minSize,
  cacheGroups: {
    styled: { ...vendors,
      idHint: '1',
      priority: -6,
      test: /[\\/]node_modules[\\/](animate|normalize|styled|milligram).*[\\/]/
    },
    support: { ...vendors,
      idHint: '2',
      priority: -7,
      test: /[\\/]node_modules[\\/](reakit|react\-aria|\@reach).*[\\/]/
    },
    babel: { ...vendors,
      idHint: '3',
      priority: -8,
      test: /[\\/]node_modules[\\/].*babel.*[\\/]/
    },
    react: { ...vendors,
      idHint: '4',
      priority: -9,
      test: /[\\/]node_modules[\\/].*react.*[\\/]/
    },
    etc: { ...vendors,
      idHint: '5',
      priority: -10,
      test: /[\\/]node_modules[\\/]/
    },
    default: {
      idHint: '6',
      minChunks: 2,
      priority: -20,
      reuseExistingChunk: true
    }
  }
}; // slows down dev a bit, but at least it ALMOST mirrors prod
// @see https://webpack.js.org/configuration/optimization/

const optimization = {
  chunkIds: ifProd ? 'deterministic' : 'named',
  concatenateModules: true,
  emitOnErrors: true,
  // useful if we need to debug
  flagIncludedChunks: true,
  innerGraph: true,
  mangleExports: ifProd,
  mergeDuplicateChunks: true,
  minimize: ifProd,
  minimizer: ifProd ? terserPlugin : undefined,
  moduleIds: ifProd ? 'deterministic' : 'named',
  nodeEnv: mode,
  portableRecords: true,
  providedExports: true,
  providedExports: true,
  realContentHash: ifProd,
  removeAvailableModules: true,
  removeEmptyChunks: true,
  runtimeChunk: {
    name: 'runtime'
  },
  sideEffects: true,
  splitChunks,
  usedExports: true
};
exports.optimization = optimization;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,