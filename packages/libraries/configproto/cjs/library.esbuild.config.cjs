"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _module = require("module");

var _envproto = require("@nodeproto/envproto");

var _esbuild = _interopRequireDefault(require("esbuild"));

var _esbuildPluginManifest = _interopRequireDefault(require("esbuild-plugin-manifest"));

var _path = _interopRequireDefault(require("path"));

var _wtf = require("@nodeproto/wtf");

/**
 * @nodeproto/configproto - esbuild configuration file
 * full featured esbuild file for library authors
 */
const pkgJson = _wtf.fs.readJsonSync('package.json'); // syncEnv(pkgJson);


throw process.env.NODE_OPTIONS;
const appInputFilename = 'index';
const appExtension = '.mjs';
const appId = appInputFilename + appExtension;
const manifestFilename = 'manifest.json';

const outdir = _path.default.resolve('dist');

const manifestPluginConfig = {
  extensionless: 'input',
  filename: manifestFilename,
  hash: false,
  shortNames: false
};

const buildLog = ({
  errors,
  warnings,
  ...result
}) => {
  console.info('\n\n finished build\n', Object.keys(result.metafile.outputs));
  if (!errors.length && !warnings.length) return;
  console.warn('\n\n build notifications', {
    errors,
    warnings
  });
};

const esbuildConfig = {
  // conditions: ['browser'],
  assetNames: 'assets/[name]',
  bundle: true,
  define: (0, _envproto.syncEnv)(pkgJson).processEnv,
  entryNames: '[name]',
  entryPoints: [appId],
  external: _module.builtinModules,
  metafile: true,
  minify: false,
  outdir,
  outExtension: {
    '.js': '.cjs'
  },
  platform: 'node',
  resolveExtensions: ['.mjs', '.js', '.cjs', '.json'],
  sourcemap: true,
  target: ['node14.17.4'],
  // LTS
  // format: 'esm',
  write: true,
  plugins: [(0, _esbuildPluginManifest.default)(manifestPluginConfig)] // format: 'iie',
  // outfile: 'dist/out.cjs',

};

_esbuild.default.build(esbuildConfig).then(result => {
  buildLog(result);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzYnVpbGQvbGlicmFyeS5lc2J1aWxkLmNvbmZpZy5tanMiXSwibmFtZXMiOlsicGtnSnNvbiIsImZzIiwicmVhZEpzb25TeW5jIiwicHJvY2VzcyIsImVudiIsIk5PREVfT1BUSU9OUyIsImFwcElucHV0RmlsZW5hbWUiLCJhcHBFeHRlbnNpb24iLCJhcHBJZCIsIm1hbmlmZXN0RmlsZW5hbWUiLCJvdXRkaXIiLCJwYXRoIiwicmVzb2x2ZSIsIm1hbmlmZXN0UGx1Z2luQ29uZmlnIiwiZXh0ZW5zaW9ubGVzcyIsImZpbGVuYW1lIiwiaGFzaCIsInNob3J0TmFtZXMiLCJidWlsZExvZyIsImVycm9ycyIsIndhcm5pbmdzIiwicmVzdWx0IiwiY29uc29sZSIsImluZm8iLCJPYmplY3QiLCJrZXlzIiwibWV0YWZpbGUiLCJvdXRwdXRzIiwibGVuZ3RoIiwid2FybiIsImVzYnVpbGRDb25maWciLCJhc3NldE5hbWVzIiwiYnVuZGxlIiwiZGVmaW5lIiwicHJvY2Vzc0VudiIsImVudHJ5TmFtZXMiLCJlbnRyeVBvaW50cyIsImV4dGVybmFsIiwiYnVpbHRpbiIsIm1pbmlmeSIsIm91dEV4dGVuc2lvbiIsInBsYXRmb3JtIiwicmVzb2x2ZUV4dGVuc2lvbnMiLCJzb3VyY2VtYXAiLCJ0YXJnZXQiLCJ3cml0ZSIsInBsdWdpbnMiLCJlc2J1aWxkIiwiYnVpbGQiLCJ0aGVuIl0sIm1hcHBpbmdzIjoiOzs7O0FBS0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBVEE7QUFDQTtBQUNBO0FBQ0E7QUFRQSxNQUFNQSxPQUFPLEdBQUdDLFFBQUdDLFlBQUgsQ0FBZ0IsY0FBaEIsQ0FBaEIsQyxDQUVBOzs7QUFFQSxNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsWUFBbEI7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBRyxPQUF6QjtBQUNBLE1BQU1DLFlBQVksR0FBRyxNQUFyQjtBQUNBLE1BQU1DLEtBQUssR0FBR0YsZ0JBQWdCLEdBQUdDLFlBQWpDO0FBQ0EsTUFBTUUsZ0JBQWdCLEdBQUcsZUFBekI7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHQyxjQUFLQyxPQUFMLENBQWEsTUFBYixDQUFmOztBQUVBLE1BQU1DLG9CQUFvQixHQUFHO0FBQzNCQyxFQUFBQSxhQUFhLEVBQUUsT0FEWTtBQUUzQkMsRUFBQUEsUUFBUSxFQUFFTixnQkFGaUI7QUFHM0JPLEVBQUFBLElBQUksRUFBRSxLQUhxQjtBQUkzQkMsRUFBQUEsVUFBVSxFQUFFO0FBSmUsQ0FBN0I7O0FBT0EsTUFBTUMsUUFBUSxHQUFHLENBQUM7QUFBRUMsRUFBQUEsTUFBRjtBQUFVQyxFQUFBQSxRQUFWO0FBQW9CLEtBQUdDO0FBQXZCLENBQUQsS0FBcUM7QUFDcERDLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHVCQURGLEVBRUVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixNQUFNLENBQUNLLFFBQVAsQ0FBZ0JDLE9BQTVCLENBRkY7QUFJQSxNQUFJLENBQUNSLE1BQU0sQ0FBQ1MsTUFBUixJQUFrQixDQUFDUixRQUFRLENBQUNRLE1BQWhDLEVBQXdDO0FBQ3hDTixFQUFBQSxPQUFPLENBQUNPLElBQVIsQ0FDRSwwQkFERixFQUVFO0FBQUVWLElBQUFBLE1BQUY7QUFBVUMsSUFBQUE7QUFBVixHQUZGO0FBSUQsQ0FWRDs7QUFZQSxNQUFNVSxhQUFhLEdBQUc7QUFDcEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLGVBRlE7QUFHcEJDLEVBQUFBLE1BQU0sRUFBRSxJQUhZO0FBSXBCQyxFQUFBQSxNQUFNLEVBQUUsdUJBQVFqQyxPQUFSLEVBQWlCa0MsVUFKTDtBQUtwQkMsRUFBQUEsVUFBVSxFQUFFLFFBTFE7QUFNcEJDLEVBQUFBLFdBQVcsRUFBRSxDQUFDNUIsS0FBRCxDQU5PO0FBT3BCNkIsRUFBQUEsUUFBUSxFQUFFQyxzQkFQVTtBQVFwQlosRUFBQUEsUUFBUSxFQUFFLElBUlU7QUFTcEJhLEVBQUFBLE1BQU0sRUFBRSxLQVRZO0FBVXBCN0IsRUFBQUEsTUFWb0I7QUFXcEI4QixFQUFBQSxZQUFZLEVBQUU7QUFBRSxXQUFPO0FBQVQsR0FYTTtBQVlwQkMsRUFBQUEsUUFBUSxFQUFFLE1BWlU7QUFhcEJDLEVBQUFBLGlCQUFpQixFQUFFLENBQ2pCLE1BRGlCLEVBRWpCLEtBRmlCLEVBR2pCLE1BSGlCLEVBSWpCLE9BSmlCLENBYkM7QUFtQnBCQyxFQUFBQSxTQUFTLEVBQUUsSUFuQlM7QUFvQnBCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxhQUFELENBcEJZO0FBb0JLO0FBQ3pCO0FBQ0FDLEVBQUFBLEtBQUssRUFBRSxJQXRCYTtBQXVCcEJDLEVBQUFBLE9BQU8sRUFBRSxDQUFDLG9DQUFlakMsb0JBQWYsQ0FBRCxDQXZCVyxDQXdCcEI7QUFDQTs7QUF6Qm9CLENBQXRCOztBQTRCQWtDLGlCQUFRQyxLQUFSLENBQWNsQixhQUFkLEVBQTZCbUIsSUFBN0IsQ0FBa0M1QixNQUFNLElBQUk7QUFDMUNILEVBQUFBLFFBQVEsQ0FBQ0csTUFBRCxDQUFSO0FBQ0QsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbm9kZXByb3RvL2NvbmZpZ3Byb3RvIC0gZXNidWlsZCBjb25maWd1cmF0aW9uIGZpbGVcbiAqIGZ1bGwgZmVhdHVyZWQgZXNidWlsZCBmaWxlIGZvciBsaWJyYXJ5IGF1dGhvcnNcbiAqL1xuaW1wb3J0IHsgYnVpbHRpbk1vZHVsZXMgYXMgYnVpbHRpbiB9IGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgeyBzeW5jRW52IH0gZnJvbSAnQG5vZGVwcm90by9lbnZwcm90byc7XG5pbXBvcnQgZXNidWlsZCBmcm9tICdlc2J1aWxkJztcbmltcG9ydCBtYW5pZmVzdFBsdWdpbiBmcm9tICdlc2J1aWxkLXBsdWdpbi1tYW5pZmVzdCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnQG5vZGVwcm90by93dGYnO1xuXG5jb25zdCBwa2dKc29uID0gZnMucmVhZEpzb25TeW5jKCdwYWNrYWdlLmpzb24nKTtcblxuLy8gc3luY0Vudihwa2dKc29uKTtcblxudGhyb3cgcHJvY2Vzcy5lbnYuTk9ERV9PUFRJT05TXG5cbmNvbnN0IGFwcElucHV0RmlsZW5hbWUgPSAnaW5kZXgnO1xuY29uc3QgYXBwRXh0ZW5zaW9uID0gJy5tanMnO1xuY29uc3QgYXBwSWQgPSBhcHBJbnB1dEZpbGVuYW1lICsgYXBwRXh0ZW5zaW9uO1xuY29uc3QgbWFuaWZlc3RGaWxlbmFtZSA9ICdtYW5pZmVzdC5qc29uJztcbmNvbnN0IG91dGRpciA9IHBhdGgucmVzb2x2ZSgnZGlzdCcpO1xuXG5jb25zdCBtYW5pZmVzdFBsdWdpbkNvbmZpZyA9IHtcbiAgZXh0ZW5zaW9ubGVzczogJ2lucHV0JyxcbiAgZmlsZW5hbWU6IG1hbmlmZXN0RmlsZW5hbWUsXG4gIGhhc2g6IGZhbHNlLFxuICBzaG9ydE5hbWVzOiBmYWxzZSxcbn07XG5cbmNvbnN0IGJ1aWxkTG9nID0gKHsgZXJyb3JzLCB3YXJuaW5ncywgLi4ucmVzdWx0IH0pID0+IHtcbiAgY29uc29sZS5pbmZvKFxuICAgICdcXG5cXG4gZmluaXNoZWQgYnVpbGRcXG4nLFxuICAgIE9iamVjdC5rZXlzKHJlc3VsdC5tZXRhZmlsZS5vdXRwdXRzKVxuICApXG4gIGlmICghZXJyb3JzLmxlbmd0aCAmJiAhd2FybmluZ3MubGVuZ3RoKSByZXR1cm47XG4gIGNvbnNvbGUud2FybihcbiAgICAnXFxuXFxuIGJ1aWxkIG5vdGlmaWNhdGlvbnMnLFxuICAgIHsgZXJyb3JzLCB3YXJuaW5ncyB9XG4gICk7XG59O1xuXG5jb25zdCBlc2J1aWxkQ29uZmlnID0ge1xuICAvLyBjb25kaXRpb25zOiBbJ2Jyb3dzZXInXSxcbiAgYXNzZXROYW1lczogJ2Fzc2V0cy9bbmFtZV0nLFxuICBidW5kbGU6IHRydWUsXG4gIGRlZmluZTogc3luY0Vudihwa2dKc29uKS5wcm9jZXNzRW52LFxuICBlbnRyeU5hbWVzOiAnW25hbWVdJyxcbiAgZW50cnlQb2ludHM6IFthcHBJZF0sXG4gIGV4dGVybmFsOiBidWlsdGluLFxuICBtZXRhZmlsZTogdHJ1ZSxcbiAgbWluaWZ5OiBmYWxzZSxcbiAgb3V0ZGlyLFxuICBvdXRFeHRlbnNpb246IHsgJy5qcyc6ICcuY2pzJyB9LFxuICBwbGF0Zm9ybTogJ25vZGUnLFxuICByZXNvbHZlRXh0ZW5zaW9uczogW1xuICAgICcubWpzJyxcbiAgICAnLmpzJyxcbiAgICAnLmNqcycsXG4gICAgJy5qc29uJ1xuICBdLFxuICBzb3VyY2VtYXA6IHRydWUsXG4gIHRhcmdldDogWydub2RlMTQuMTcuNCddLCAvLyBMVFNcbiAgLy8gZm9ybWF0OiAnZXNtJyxcbiAgd3JpdGU6IHRydWUsXG4gIHBsdWdpbnM6IFttYW5pZmVzdFBsdWdpbihtYW5pZmVzdFBsdWdpbkNvbmZpZyldLFxuICAvLyBmb3JtYXQ6ICdpaWUnLFxuICAvLyBvdXRmaWxlOiAnZGlzdC9vdXQuY2pzJyxcbn07XG5cbmVzYnVpbGQuYnVpbGQoZXNidWlsZENvbmZpZykudGhlbihyZXN1bHQgPT4ge1xuICBidWlsZExvZyhyZXN1bHQpO1xufSlcbiJdfQ==