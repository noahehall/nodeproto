"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.esbuildConfig = exports.esrunConfig = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

require("core-js/modules/esnext.map.delete-all.js");

require("core-js/modules/esnext.map.every.js");

require("core-js/modules/esnext.map.filter.js");

require("core-js/modules/esnext.map.find.js");

require("core-js/modules/esnext.map.find-key.js");

require("core-js/modules/esnext.map.includes.js");

require("core-js/modules/esnext.map.key-of.js");

require("core-js/modules/esnext.map.map-keys.js");

require("core-js/modules/esnext.map.map-values.js");

require("core-js/modules/esnext.map.merge.js");

require("core-js/modules/esnext.map.reduce.js");

require("core-js/modules/esnext.map.some.js");

require("core-js/modules/esnext.map.update.js");

var _esbuild = _interopRequireDefault(require("esbuild"));

var _fsproto = require("@nodeproto/wtf/fsproto");

const servers = new Map();

const stopDev = async config => {
  const app = servers.get(config.entryPoints);
  if (!app) return;
  const {
    httpTerminator,
    server,
    controller
  } = app;
  if (httpTerminator) await httpTerminator.terminate();else if (controller) await controller.abort();else if (server) await server.close();else throw new Error('retrieved app doenst contain httpTerminator|server|controller properties');
};

const startDev = async config => {
  await stopDev(config);
  let manifest, server;

  try {
    manifest = JSON.parse(await _fsproto.fsproto.fs.readFile(config.outdir + '/' + 'manifest.json', 'utf-8'));
    const serverPath = config.outdir + '/' + Object.values(manifest)[0].split('/').pop();
    server = await Promise.resolve(`${serverPath}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
    if (!server.runApp) throw new Error('server does not contain runApp fn');
    servers.set(config.entryPoints, await server.runApp());
  } catch (e) {
    console.error('\n\n error starting server', config, manifest, server);
    throw new Error(e);
  }

  return;
};

const logResults = async ({
  errors = [],
  warnings = [],
  metafile
}) => {
  if (warnings.length) console.info('\n\n build warnings', warnings);
  if (errors.length) throw new Error(errors);
  console.info('\n\n finished build\n', Object.keys(metafile.outputs));
};

const esrunConfig = async conf => {
  const config = { ...conf,
    watch: {
      async onRebuild(errors, results) {
        if (errors) throw new Error(errors);
        logResults(results);
        await startDev(conf);
      }

    }
  };
  const results = await _esbuild.default.build(config);
  logResults(results);
  await startDev(config);
};

exports.esrunConfig = esrunConfig;

const esbuildConfig = async config => _esbuild.default.build(config).then(results => logResults(results));

exports.esbuildConfig = esbuildConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzYnVpbGQvcnVuLmVzYnVpbGQuY29uZmlnLm1qcyJdLCJuYW1lcyI6WyJzZXJ2ZXJzIiwiTWFwIiwic3RvcERldiIsImNvbmZpZyIsImFwcCIsImdldCIsImVudHJ5UG9pbnRzIiwiaHR0cFRlcm1pbmF0b3IiLCJzZXJ2ZXIiLCJjb250cm9sbGVyIiwidGVybWluYXRlIiwiYWJvcnQiLCJjbG9zZSIsIkVycm9yIiwic3RhcnREZXYiLCJtYW5pZmVzdCIsIkpTT04iLCJwYXJzZSIsImZzcHJvdG8iLCJmcyIsInJlYWRGaWxlIiwib3V0ZGlyIiwic2VydmVyUGF0aCIsIk9iamVjdCIsInZhbHVlcyIsInNwbGl0IiwicG9wIiwicnVuQXBwIiwic2V0IiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImxvZ1Jlc3VsdHMiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIm1ldGFmaWxlIiwibGVuZ3RoIiwiaW5mbyIsImtleXMiLCJvdXRwdXRzIiwiZXNydW5Db25maWciLCJjb25mIiwid2F0Y2giLCJvblJlYnVpbGQiLCJyZXN1bHRzIiwiZXNidWlsZCIsImJ1aWxkIiwiZXNidWlsZENvbmZpZyIsInRoZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsT0FBTyxHQUFHLElBQUlDLEdBQUosRUFBaEI7O0FBRUEsTUFBTUMsT0FBTyxHQUFHLE1BQU1DLE1BQU4sSUFBZ0I7QUFDOUIsUUFBTUMsR0FBRyxHQUFHSixPQUFPLENBQUNLLEdBQVIsQ0FBWUYsTUFBTSxDQUFDRyxXQUFuQixDQUFaO0FBRUEsTUFBSSxDQUFDRixHQUFMLEVBQVU7QUFFVixRQUFNO0FBQUVHLElBQUFBLGNBQUY7QUFBa0JDLElBQUFBLE1BQWxCO0FBQTBCQyxJQUFBQTtBQUExQixNQUF5Q0wsR0FBL0M7QUFFQSxNQUFJRyxjQUFKLEVBQW9CLE1BQU1BLGNBQWMsQ0FBQ0csU0FBZixFQUFOLENBQXBCLEtBQ0ssSUFB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WixVQUFVLENBQUNZLE9BQUQsQ0FBaEQsQ0FESyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlc2J1aWxkIGZyb20gJ2VzYnVpbGQnO1xuaW1wb3J0IHsgZnNwcm90byB9IGZyb20gJ0Bub2RlcHJvdG8vd3RmL2ZzcHJvdG8nO1xuXG5jb25zdCBzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuXG5jb25zdCBzdG9wRGV2ID0gYXN5bmMgY29uZmlnID0+IHtcbiAgY29uc3QgYXBwID0gc2VydmVycy5nZXQoY29uZmlnLmVudHJ5UG9pbnRzKTtcblxuICBpZiAoIWFwcCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgaHR0cFRlcm1pbmF0b3IsIHNlcnZlciwgY29udHJvbGxlciB9ID0gYXBwO1xuXG4gIGlmIChodHRwVGVybWluYXRvcikgYXdhaXQgaHR0cFRlcm1pbmF0b3IudGVybWluYXRlKCk7XG4gIGVsc2UgaWYgKGNvbnRyb2xsZXIpIGF3YWl0IGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgZWxzZSBpZiAoc2VydmVyKSBhd2FpdCBzZXJ2ZXIuY2xvc2UoKTtcbiAgZWxzZSB0aHJvdyBuZXcgRXJyb3IgKCdyZXRyaWV2ZWQgYXBwIGRvZW5zdCBjb250YWluIGh0dHBUZXJtaW5hdG9yfHNlcnZlcnxjb250cm9sbGVyIHByb3BlcnRpZXMnKTtcbn1cblxuY29uc3Qgc3RhcnREZXYgPSBhc3luYyBjb25maWcgPT4ge1xuICBhd2FpdCBzdG9wRGV2KGNvbmZpZyk7XG5cbiAgbGV0IG1hbmlmZXN0LCBzZXJ2ZXI7XG5cbiAgdHJ5IHtcbiAgICAvLyB3aWxsIGJyZWFrIGlmIGNvbnN1bWVyIHVzZXMgYSBkaWZmZXJlbnQgbWFuaWZlc3QgbmFtZVxuICAgIG1hbmlmZXN0ID0gSlNPTi5wYXJzZShhd2FpdCBmc3Byb3RvLmZzLnJlYWRGaWxlKGNvbmZpZy5vdXRkaXIgKyAnLycgKyAnbWFuaWZlc3QuanNvbicsICd1dGYtOCcpKTtcblxuICAgIC8vIHdpbGwgbGlrZWx5IGJyZWFrIGlmIGNvbnN1bWVyIGhhcyBtdWx0aXBsZSBlbnR5cnBvaW50cyBhbmQgaHRlIGZpcnN0IGlzbnQgdGhlIHNlcnZlclxuICAgIGNvbnN0IHNlcnZlclBhdGggPSBjb25maWcub3V0ZGlyICsgJy8nICsgT2JqZWN0LnZhbHVlcyhtYW5pZmVzdClbMF0uc3BsaXQoJy8nKS5wb3AoKTtcblxuICAgIHNlcnZlciA9IGF3YWl0IGltcG9ydChzZXJ2ZXJQYXRoKTtcblxuICAgIGlmICghc2VydmVyLnJ1bkFwcCkgdGhyb3cgbmV3IEVycm9yKCdzZXJ2ZXIgZG9lcyBub3QgY29udGFpbiBydW5BcHAgZm4nKTtcblxuICAgIHNlcnZlcnMuc2V0KGNvbmZpZy5lbnRyeVBvaW50cywgYXdhaXQgc2VydmVyLnJ1bkFwcCgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1xcblxcbiBlcnJvciBzdGFydGluZyBzZXJ2ZXInLCBjb25maWcsIG1hbmlmZXN0LCBzZXJ2ZXIpO1xuXG4gICAgdGhyb3cgbmV3IEVycm9yKGUpO1xuICB9XG5cbiAgcmV0dXJuXG59O1xuXG5jb25zdCBsb2dSZXN1bHRzID0gYXN5bmMgKHsgZXJyb3JzID0gW10sIHdhcm5pbmdzID0gW10sIG1ldGFmaWxlIH0pID0+IHtcbiAgaWYgKHdhcm5pbmdzLmxlbmd0aCkgY29uc29sZS5pbmZvKCdcXG5cXG4gYnVpbGQgd2FybmluZ3MnLCB3YXJuaW5ncyk7XG4gIGlmIChlcnJvcnMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzKTtcblxuICBjb25zb2xlLmluZm8oJ1xcblxcbiBmaW5pc2hlZCBidWlsZFxcbicsIE9iamVjdC5rZXlzKG1ldGFmaWxlLm91dHB1dHMpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGVzcnVuQ29uZmlnID0gYXN5bmMgY29uZiA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAuLi5jb25mLFxuICAgIHdhdGNoOiB7XG4gICAgICBhc3luYyBvblJlYnVpbGQoZXJyb3JzLCByZXN1bHRzKSB7XG4gICAgICAgIGlmIChlcnJvcnMpIHRocm93IG5ldyBFcnJvcihlcnJvcnMpO1xuXG4gICAgICAgIGxvZ1Jlc3VsdHMocmVzdWx0cyk7XG5cbiAgICAgICAgYXdhaXQgc3RhcnREZXYoY29uZik7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZXNidWlsZC5idWlsZChjb25maWcpO1xuXG4gIGxvZ1Jlc3VsdHMocmVzdWx0cyk7XG4gIGF3YWl0IHN0YXJ0RGV2KGNvbmZpZyk7XG59XG5cbmV4cG9ydCBjb25zdCBlc2J1aWxkQ29uZmlnID0gYXN5bmMgY29uZmlnID0+XG4gIGVzYnVpbGQuYnVpbGQoY29uZmlnKS50aGVuKHJlc3VsdHMgPT4gbG9nUmVzdWx0cyhyZXN1bHRzKSk7XG4iXX0=