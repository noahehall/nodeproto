"use strict";

exports.__esModule = true;
exports.default = baseWebpackConfig;

var _bundleStatsWebpackPlugin = require("bundle-stats-webpack-plugin");

var _url = require("url");

const t = (msg = 'required', p = 'error in baseWebpackConfig: ') => {
  throw new Error(`${p}${msg}`);
};

const r = thing => t(`${thing} is required`);

const defaultPlugins = [new _bundleStatsWebpackPlugin.BundleStatsWebpackPlugin({
  baseline: false,
  compare: false,
  html: true,
  json: false,
  outDir: '../bundlestats',
  silent: false
})];

const generateLoaders = ({
  pathSrc,
  stringReplaceLoader
}) => ({
  cssExternalLoader: {
    test: /\.css$/,
    include: /node_modules/,
    use: ['style-loader', 'css-loader']
  },
  cssInternalLoader: {
    test: /\.css$/,
    exclude: /node_modules/,
    use: ['style-loader', 'css-loader']
  },
  esmLoader: {
    test: /\.m?js$/,
    type: 'javascript/auto',
    resolve: {
      fullySpecified: false
    }
  },
  fontLoader: {
    test: /\.(eot|otf|ttf|woff|woff2)$/,
    use: 'file-loader'
  },
  imageLoader: {
    test: /\.(jpg|png|gif)$/,
    use: [{
      loader: 'url-loader',
      options: {
        limit: 10 * 1024
      }
    }]
  },
  jsLoader: {
    exclude: /node_modules/,
    include: [pathSrc],
    test: /\.(c|m)?jsx?$/,
    type: 'javascript/auto',
    use: [{
      loader: 'babel-loader',
      options: {
        sourceType: "unambiguous",
        configFile: (0, _url.fileURLToPath)(new URL('../babel/flow.babelrc', import.meta.url))
      }
    }, stringReplaceLoader]
  },
  svgLoader: {
    test: /\.svg$/,
    use: [{
      loader: 'svg-url-loader',
      options: {
        limit: 10 * 1024,
        noquotes: true
      }
    }]
  },
  videoLoader: {
    test: /\.(mp4|webm)$/,
    use: {
      loader: 'url-loader',
      options: {
        limit: 10000
      }
    }
  }
});

function baseWebpackConfig({
  entry = r('entry: Array'),
  pack = {},
  builtinModules = pack.builtinModules || [],
  ifDev = pack.ifDev,
  ifProd = pack.ifProd,
  pathDist = pack.pathDist || r('pathDist: String'),
  pathSrc = pack.pathSrc || r('pathSrc: String'),
  pkgJson = pack.pkgJson || {},
  basePlugins = defaultPlugins,
  context = process.cwd(),
  entryPush = [],
  entryUnshift = [],
  extensions = ['.mjs', '.js', '.jsx', '.jsx', '.json'],
  externals = [],
  mainFields = ['module', 'browser', 'main'],
  mode = 'development',
  optimization = {},
  output = {},
  outputDefault = {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js'
  },
  plugins = [],
  processEnv = {},
  publicPath = 'auto',
  stats = 'summary',
  target = 'web',
  devtool = ifProd ? 'hidden-source-map' : 'eval-cheap-module-source-map',
  stringReplaceLoader = {
    loader: 'string-replace-loader',
    options: {
      multiple: Object.entries(processEnv).map(([search, replace]) => ({
        search,
        replace
      }))
    }
  },
  ...overrides
} = {}) {
  return {
    context,
    devtool,
    entry: entryUnshift.concat(entry, entryPush).filter(e => e),
    externals: builtinModules.concat(externals),
    mode,
    module: {
      rules: Object.values(generateLoaders({
        pathSrc,
        stringReplaceLoader
      })).filter(x => x)
    },
    optimization,
    output: {
      path: pathDist,
      publicPath,
      ...outputDefault,
      ...output
    },
    plugins: plugins.concat(basePlugins).filter(x => x),
    resolve: {
      extensions,
      mainFields
    },
    stats,
    target,
    ...overrides
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,