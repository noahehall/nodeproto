"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = webpackServer;

var _httpTerminator = _interopRequireDefault(require("http-terminator"));

var _koa = _interopRequireDefault(require("koa"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware-2"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware-2"));

const r = (t, msg = 'is required') => {
  throw new Error(`${t}: ${msg}`);
};

function webpackServer({
  useConfig = r('useConfig: Object'),
  pack = {}
}) {
  const CLIENT_PORT = pack.CLIENT_PORT || process.env.CLIENT_PORT || 8080;
  const APP_NAME = pack.APP_NAME || process.env.APP_NAME || '@nodeproto/configproto.webpack.server';
  const compiler = (0, _webpack.default)(useConfig);
  const webpackDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(compiler, {
    publicPath: useConfig.publicPath,
    stats: 'errors-warnings',
    useBff: 'useKoa2',
    writeToDisk: pack.writeToDisk
  });
  const app = new _koa.default();
  app.use(webpackDevMiddlewareInstance);
  app.use((0, _webpackHotMiddleware.default)(compiler, {
    useBff: 'useKoa2'
  }));
  const controller = new AbortController();
  const config = {
    host: 'localhost',
    port: CLIENT_PORT,
    signal: controller.signal
  };
  const server = app.listen(config, () => console.info(`${APP_NAME} running on: ${CLIENT_PORT}`));
  return {
    app,
    compiler,
    config,
    controller,
    httpTerminator: _httpTerminator.default.createHttpTerminator({
      server
    }),
    server,
    webpackDevMiddlewareInstance
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3dlYnBhY2svYmZmL3NlcnZlci53ZWJwYWNrLm1qcyJdLCJuYW1lcyI6WyJyIiwidCIsIm1zZyIsIkVycm9yIiwid2VicGFja1NlcnZlciIsInVzZUNvbmZpZyIsInBhY2siLCJDTElFTlRfUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJBUFBfTkFNRSIsImNvbXBpbGVyIiwid2VicGFja0Rldk1pZGRsZXdhcmVJbnN0YW5jZSIsInB1YmxpY1BhdGgiLCJzdGF0cyIsInVzZUJmZiIsIndyaXRlVG9EaXNrIiwiYXBwIiwiS29hIiwidXNlIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImNvbmZpZyIsImhvc3QiLCJwb3J0Iiwic2lnbmFsIiwic2VydmVyIiwibGlzdGVuIiwiY29uc29sZSIsImluZm8iLCJodHRwVGVybWluYXRvciIsImNyZWF0ZUh0dHBUZXJtaW5hdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsQ0FBQyxHQUFHLENBQUNDLENBQUQsRUFBSUMsR0FBRyxHQUFHLGFBQVYsS0FBNEI7QUFBRSxRQUFNLElBQUlDLEtBQUosQ0FBVyxHQUFFRixDQUFFLEtBQUlDLEdBQUksRUFBdkIsQ0FBTjtBQUFrQyxDQUExRTs7QUFFZSxTQUFTRSxhQUFULENBQXVCO0FBQ3BDQyxFQUFBQSxTQUFTLEdBQUdMLENBQUMsQ0FBQyxtQkFBRCxDQUR1QjtBQUVwQ00sRUFBQUEsSUFBSSxHQUFHO0FBRjZCLENBQXZCLEVBR1o7QUFDRCxRQUFNQyxXQUFXLEdBQUdELElBQUksQ0FBQ0MsV0FBTCxJQUFvQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlGLFdBQWhDLElBQStDLElBQW5FO0FBQ0EsUUFBTUcsUUFBUSxHQUFHSixJQUFJLENBQUNJLFFBQUwsSUFBaUJGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUE3QixJQUF5Qyx1Q0FBMUQ7QUFFQSxRQUFNQyxRQUFRLEdBQUcsc0JBQVFOLFNBQVIsQ0FBakI7QUFFQSxRQUFNTyw0QkFBNEIsR0FBRyxtQ0FDbkNELFFBRG1DLEVBRW5DO0FBQ0VFLElBQUFBLFVBQVUsRUFBRVIsU0FBUyxDQUFDUSxVQUR4QjtBQUVFQyxJQUFBQSxLQUFLLEVBQUUsaUJBRlQ7QUFHRUMsSUFBQUEsTUFBTSxFQUFFLFNBSFY7QUFJRUMsSUFBQUEsV0FBVyxFQUFFVixJQUFJLENBQUNVO0FBSnBCLEdBRm1DLENBQXJDO0FBVUEsUUFBTUMsR0FBRyxHQUFHLElBQUlDLFlBQUosRUFBWjtBQUVBRCxFQUFBQSxHQUFHLENBQUNFLEdBQUosQ0FBUVAsNEJBQVI7QUFFQUssRUFBQUEsR0FBRyxDQUFDRSxHQUFKLENBQVEsbUNBQ05SLFFBRE0sRUFFTjtBQUFFSSxJQUFBQSxNQUFNLEVBQUU7QUFBVixHQUZNLENBQVI7QUFLQSxRQUFNSyxVQUFVLEdBQUcsSUFBSUMsZUFBSixFQUFuQjtBQUVBLFFBQU1DLE1BQU0sR0FBRztBQUNiQyxJQUFBQSxJQUFJLEVBQUUsV0FETztBQUViQyxJQUFBQSxJQUFJLEVBQUVqQixXQUZPO0FBR2JrQixJQUFBQSxNQUFNLEVBQUVMLFVBQVUsQ0FBQ0s7QUFITixHQUFmO0FBTUEsUUFBTUMsTUFBTSxHQUFHVCxHQUFHLENBQUNVLE1BQUosQ0FDYkwsTUFEYSxFQUViLE1BQU9NLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLEdBQUVuQixRQUFTLGdCQUFlSCxXQUFZLEVBQXBELENBRk0sQ0FBZjtBQVFBLFNBQU87QUFDTFUsSUFBQUEsR0FESztBQUVMTixJQUFBQSxRQUZLO0FBR0xXLElBQUFBLE1BSEs7QUFLTEYsSUFBQUEsVUFMSztBQVNMVSxJQUFBQSxjQUFjLEVBQUdBLHdCQUFlQyxvQkFBZixDQUFvQztBQUFFTCxNQUFBQTtBQUFGLEtBQXBDLENBVFo7QUFVTEEsSUFBQUEsTUFWSztBQVlMZCxJQUFBQTtBQVpLLEdBQVA7QUFjRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwVGVybWluYXRvciBmcm9tICdodHRwLXRlcm1pbmF0b3InO1xuaW1wb3J0IEtvYSBmcm9tICdrb2EnO1xuaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSAnd2VicGFjay1kZXYtbWlkZGxld2FyZS0yJztcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snO1xuaW1wb3J0IHdlYnBhY2tIb3RNaWRkbGV3YXJlIGZyb20gJ3dlYnBhY2staG90LW1pZGRsZXdhcmUtMic7XG5cbmNvbnN0IHIgPSAodCwgbXNnID0gJ2lzIHJlcXVpcmVkJykgPT4geyB0aHJvdyBuZXcgRXJyb3IoYCR7dH06ICR7bXNnfWApOyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3ZWJwYWNrU2VydmVyKHtcbiAgdXNlQ29uZmlnID0gcigndXNlQ29uZmlnOiBPYmplY3QnKSxcbiAgcGFjayA9IHt9LFxufSkge1xuICBjb25zdCBDTElFTlRfUE9SVCA9IHBhY2suQ0xJRU5UX1BPUlQgfHwgcHJvY2Vzcy5lbnYuQ0xJRU5UX1BPUlQgfHwgODA4MDtcbiAgY29uc3QgQVBQX05BTUUgPSBwYWNrLkFQUF9OQU1FIHx8IHByb2Nlc3MuZW52LkFQUF9OQU1FIHx8ICdAbm9kZXByb3RvL2NvbmZpZ3Byb3RvLndlYnBhY2suc2VydmVyJztcblxuICBjb25zdCBjb21waWxlciA9IHdlYnBhY2sodXNlQ29uZmlnKTtcblxuICBjb25zdCB3ZWJwYWNrRGV2TWlkZGxld2FyZUluc3RhbmNlID0gbWlkZGxld2FyZShcbiAgICBjb21waWxlcixcbiAgICB7XG4gICAgICBwdWJsaWNQYXRoOiB1c2VDb25maWcucHVibGljUGF0aCxcbiAgICAgIHN0YXRzOiAnZXJyb3JzLXdhcm5pbmdzJyxcbiAgICAgIHVzZUJmZjogJ3VzZUtvYTInLFxuICAgICAgd3JpdGVUb0Rpc2s6IHBhY2sud3JpdGVUb0Rpc2ssXG4gICAgfVxuICApO1xuXG4gIGNvbnN0IGFwcCA9IG5ldyBLb2EoKTtcblxuICBhcHAudXNlKHdlYnBhY2tEZXZNaWRkbGV3YXJlSW5zdGFuY2UpO1xuXG4gIGFwcC51c2Uod2VicGFja0hvdE1pZGRsZXdhcmUoXG4gICAgY29tcGlsZXIsXG4gICAgeyB1c2VCZmY6ICd1c2VLb2EyJyB9XG4gICkpO1xuXG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgY29uc3QgY29uZmlnID0ge1xuICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgIHBvcnQ6IENMSUVOVF9QT1JULFxuICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXG4gIH07XG5cbiAgY29uc3Qgc2VydmVyID0gYXBwLmxpc3RlbihcbiAgICBjb25maWcsXG4gICAgKCkgPT4gIGNvbnNvbGUuaW5mbyhgJHtBUFBfTkFNRX0gcnVubmluZyBvbjogJHtDTElFTlRfUE9SVH1gKVxuICApO1xuXG4gIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dhanVzL2h0dHAtdGVybWluYXRvclxuICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWp1cy9odHRwLXRlcm1pbmF0b3IvYmxvYi9tYXN0ZXIvdGVzdC9odHRwLXRlcm1pbmF0b3IvZmFjdG9yaWVzL2NyZWF0ZUludGVybmFsSHR0cFRlcm1pbmF0b3IudHNcbiAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1taWRkbGV3YXJlL2Jsb2IvbWFzdGVyL3Rlc3QvbWlkZGxld2FyZS50ZXN0LmpzXG4gIHJldHVybiB7XG4gICAgYXBwLFxuICAgIGNvbXBpbGVyLFxuICAgIGNvbmZpZyxcbiAgICAvLyBjb250cm9sbGVyLmFib3J0KCkgLT4gZ2VuZXJhbGx5IHNob3VsZCBzaHV0ZG93biBzZXJ2ZXIsIGJ1dCBwcmVmZXIgaHR0cFRlcm1pbmF0ZTtcbiAgICBjb250cm9sbGVyLFxuICAgIC8vIGxpa2VseSB5b3Ugd2FudCB0byB1c2UgdGhpcyBpbiBhIHJlYWwgZW52XG4gICAgLy8gZXNwZWNpYWxseSBpZiB5b3UgZXhwZWN0IHRoZXJlIHRvIGJlIGFuIHVua25vd24gYW1vdW50IG9mIGNvbm5lY3Rpb25zXG4gICAgLy8gYXdhaXQgaHR0cFRlcm1pbmF0b3IudGVybWluYXRlKCk7XG4gICAgaHR0cFRlcm1pbmF0b3I6ICBodHRwVGVybWluYXRvci5jcmVhdGVIdHRwVGVybWluYXRvcih7IHNlcnZlciB9KSxcbiAgICBzZXJ2ZXIsXG4gICAgLy8gYXdhaXQgd2VicGFja0Rldk1pZGRsZXdhcmVJbnN0YW5jZS5jbG9zZSgpIC0+IGNsb3NlIHdlYnBhY2sgZGV2IHNlcnZlcjtcbiAgICB3ZWJwYWNrRGV2TWlkZGxld2FyZUluc3RhbmNlLFxuICB9O1xufVxuIl19