"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = reactEsbuildWebpackConfig;

var _esbuildLoader = require("esbuild-loader");

var _url = require("url");

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _esbuild = _interopRequireDefault(require("esbuild"));

var _webpack = _interopRequireDefault(require("webpack"));

const {
  ProvidePlugin
} = _webpack.default;

const isR = arg => {
  throw new Error(`${arg} is required in react.esbuild.webpack.config.mjs`);
};

function reactEsbuildWebpackConfig({
  entry = isR('entry'),
  htmlOptions = isR('htmlOptions'),
  outputDir = isR('outputDir'),
  pack,
  ...options
} = {}) {
  return {
    entry,
    mode: 'development',
    module: {
      rules: [{
        exclude: /node_modules/,
        test: /\.(c|m)?jsx?$/,
        use: [{
          loader: 'esbuild-loader',
          options: {
            implementation: _esbuild.default,
            loader: 'jsx',
            target: 'es2015'
          }
        }, {
          loader: 'babel-loader',
          options: {
            sourceType: "unambiguous",
            configFile: (0, _url.fileURLToPath)(new URL('../babel/flow.babelrc', import.meta.url))
          }
        }]
      }]
    },
    optimization: {
      minimize: false,
      minimizer: [new _esbuildLoader.ESBuildMinifyPlugin()]
    },
    output: {
      libraryTarget: 'commonjs',
      path: outputDir
    },
    plugins: [new _htmlWebpackPlugin.default(htmlOptions), new ProvidePlugin({
      React: 'react'
    })],
    ...options
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3dlYnBhY2svcmVhY3QuZXNidWlsZC53ZWJwYWNrLmNvbmZpZy5tanMiXSwibmFtZXMiOlsiUHJvdmlkZVBsdWdpbiIsIndlYnBhY2siLCJpc1IiLCJhcmciLCJFcnJvciIsInJlYWN0RXNidWlsZFdlYnBhY2tDb25maWciLCJlbnRyeSIsImh0bWxPcHRpb25zIiwib3V0cHV0RGlyIiwicGFjayIsIm9wdGlvbnMiLCJtb2RlIiwibW9kdWxlIiwicnVsZXMiLCJleGNsdWRlIiwidGVzdCIsInVzZSIsImxvYWRlciIsImltcGxlbWVudGF0aW9uIiwidGFyZ2V0Iiwic291cmNlVHlwZSIsImNvbmZpZ0ZpbGUiLCJVUkwiLCJpbXBvcnQiLCJtZXRhIiwidXJsIiwib3B0aW1pemF0aW9uIiwibWluaW1pemUiLCJtaW5pbWl6ZXIiLCJFU0J1aWxkTWluaWZ5UGx1Z2luIiwib3V0cHV0IiwibGlicmFyeVRhcmdldCIsInBhdGgiLCJwbHVnaW5zIiwiSHRtbFdlYnBhY2tQbHVnaW4iLCJSZWFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFvQkMsZ0JBQTFCOztBQUVBLE1BQU1DLEdBQUcsR0FBR0MsR0FBRyxJQUFJO0FBQ2pCLFFBQU0sSUFBSUMsS0FBSixDQUFXLEdBQUVELEdBQUksa0RBQWpCLENBQU47QUFDRCxDQUZEOztBQUtlLFNBQVNFLHlCQUFULENBQW9DO0FBRWpEQyxFQUFBQSxLQUFLLEdBQUdKLEdBQUcsQ0FBQyxPQUFELENBRnNDO0FBR2pESyxFQUFBQSxXQUFXLEdBQUdMLEdBQUcsQ0FBQyxhQUFELENBSGdDO0FBSWpETSxFQUFBQSxTQUFTLEdBQUdOLEdBQUcsQ0FBQyxXQUFELENBSmtDO0FBS2pETyxFQUFBQSxJQUxpRDtBQU9qRCxLQUFHQztBQVA4QyxJQVEvQyxFQVJXLEVBUVA7QUFDTixTQUFPO0FBQ0xKLElBQUFBLEtBREs7QUFFTEssSUFBQUEsSUFBSSxFQUFFLGFBRkQ7QUFHTEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VDLFFBQUFBLE9BQU8sRUFBRSxjQURYO0FBRUVDLFFBQUFBLElBQUksRUFBRSxlQUZSO0FBR0VDLFFBQUFBLEdBQUcsRUFBRSxDQUNIO0FBQ0VDLFVBQUFBLE1BQU0sRUFBRSxnQkFEVjtBQUVFUCxVQUFBQSxPQUFPLEVBQUU7QUFDUFEsWUFBQUEsY0FBYyxFQUFkQSxnQkFETztBQUVQRCxZQUFBQSxNQUFNLEVBQUUsS0FGRDtBQUdQRSxZQUFBQSxNQUFNLEVBQUU7QUFIRDtBQUZYLFNBREcsRUFTSDtBQUNFRixVQUFBQSxNQUFNLEVBQUUsY0FEVjtBQUVFUCxVQUFBQSxPQUFPLEVBQUU7QUFDUFUsWUFBQUEsVUFBVSxFQUFFLGFBREw7QUFHUEMsWUFBQUEsVUFBVSxFQUFFLHdCQUFjLElBQUlDLEdBQUosQ0FBUSx1QkFBUixFQUFpQ0MsTUFBTSxDQUFDQyxJQUFQLENBQVlDLEdBQTdDLENBQWQ7QUFITDtBQUZYLFNBVEc7QUFIUCxPQURLO0FBREQsS0FISDtBQTZCTEMsSUFBQUEsWUFBWSxFQUFFO0FBQ1pDLE1BQUFBLFFBQVEsRUFBRSxLQURFO0FBRVpDLE1BQUFBLFNBQVMsRUFBRSxDQUNULElBQUlDLGtDQUFKLEVBRFM7QUFGQyxLQTdCVDtBQW1DTEMsSUFBQUEsTUFBTSxFQUFFO0FBQUVDLE1BQUFBLGFBQWEsRUFBRSxVQUFqQjtBQUE2QkMsTUFBQUEsSUFBSSxFQUFFeEI7QUFBbkMsS0FuQ0g7QUFvQ0x5QixJQUFBQSxPQUFPLEVBQUUsQ0FDUCxJQUFJQywwQkFBSixDQUFzQjNCLFdBQXRCLENBRE8sRUFFUCxJQUFJUCxhQUFKLENBQWtCO0FBQ2hCbUMsTUFBQUEsS0FBSyxFQUFFO0FBRFMsS0FBbEIsQ0FGTyxDQXBDSjtBQTBDTCxPQUFHekI7QUExQ0UsR0FBUDtBQTRDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IGRldGVybWluZSBpZiBzaG91bGQgcGlwZSB0aHJvdWdoIGJhc2Uud2VicGFjay5jb25maWcubWpzXG4vLyB3ZSBkb250IGdldCAnZXhwb3J0cyBub3QgZGVmaW5lZCcgd2hlbiB1c2luZyBiYXNlXG5cbmltcG9ydCB7IEVTQnVpbGRNaW5pZnlQbHVnaW4gfSBmcm9tICdlc2J1aWxkLWxvYWRlcic7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCBIdG1sV2VicGFja1BsdWdpbiBmcm9tICdodG1sLXdlYnBhY2stcGx1Z2luJztcbmltcG9ydCBpbXBsZW1lbnRhdGlvbiBmcm9tICdlc2J1aWxkJztcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snO1xuXG5jb25zdCB7IFByb3ZpZGVQbHVnaW4gfSA9IHdlYnBhY2s7XG5cbmNvbnN0IGlzUiA9IGFyZyA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgJHthcmd9IGlzIHJlcXVpcmVkIGluIHJlYWN0LmVzYnVpbGQud2VicGFjay5jb25maWcubWpzYCk7XG59O1xuXG4vLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcml2YXRlbnVtYmVyL2VzYnVpbGQtbG9hZGVyLWV4YW1wbGVzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWFjdEVzYnVpbGRXZWJwYWNrQ29uZmlnICh7XG4gIC8vIGJhYmVsQ29uZmlnRmlsZSA9ICdAbm9kZXByb3RvL2NvbmZpZ3Byb3RvL2JhYmVsL2Zsb3cnLCBUT0RPOiByZW1vdmUgZnJvbSB0ZXN0c1xuICBlbnRyeSA9IGlzUignZW50cnknKSxcbiAgaHRtbE9wdGlvbnMgPSBpc1IoJ2h0bWxPcHRpb25zJyksXG4gIG91dHB1dERpciA9IGlzUignb3V0cHV0RGlyJyksXG4gIHBhY2ssXG5cbiAgLi4ub3B0aW9uc1xufSA9IHt9KSB7XG4gIHJldHVybiB7XG4gICAgZW50cnksXG4gICAgbW9kZTogJ2RldmVsb3BtZW50JyxcbiAgICBtb2R1bGU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzLyxcbiAgICAgICAgICB0ZXN0OiAvXFwuKGN8bSk/anN4PyQvLFxuICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsb2FkZXI6ICdlc2J1aWxkLWxvYWRlcicsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgICAgICAgICBsb2FkZXI6ICdqc3gnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogJ2VzMjAxNScsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsb2FkZXI6ICdiYWJlbC1sb2FkZXInLFxuICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJ1bmFtYmlndW91c1wiLFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGxpa2VseSB3b250IHdvcmsgd2l0aCBjanNcbiAgICAgICAgICAgICAgICBjb25maWdGaWxlOiBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uL2JhYmVsL2Zsb3cuYmFiZWxyYycsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgb3B0aW1pemF0aW9uOiB7XG4gICAgICBtaW5pbWl6ZTogZmFsc2UsXG4gICAgICBtaW5pbWl6ZXI6IFtcbiAgICAgICAgbmV3IEVTQnVpbGRNaW5pZnlQbHVnaW4oKSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBvdXRwdXQ6IHsgbGlicmFyeVRhcmdldDogJ2NvbW1vbmpzJywgcGF0aDogb3V0cHV0RGlyIH0sXG4gICAgcGx1Z2luczogW1xuICAgICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKGh0bWxPcHRpb25zKSxcbiAgICAgIG5ldyBQcm92aWRlUGx1Z2luKHtcbiAgICAgICAgUmVhY3Q6ICdyZWFjdCcsXG4gICAgICB9KSxcbiAgICBdLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG59XG4iXX0=