const {
  validate
} = require('schema-utils');

const flowRemoveTypes = require('flow-remove-types');

const _schema = {
  type: 'object',
  properties: {
    exclude: {
      type: 'array'
    },
    include: {
      type: 'array'
    },
    all: {
      type: 'boolean'
    }
  }
};
const _options = {
  exclude: [/node_modules/],
  include: [/\.(c|m|)jsx?/],
  all: true
};

const _upsertOptions = function () {
  try {
    const flowOptions = { ..._options,
      ...this.getOptions(_schema)
    };
    validate(_schema, flowOptions, {
      name: this.displayName,
      baseDataPath: 'options'
    });
    return flowOptions;
  } catch {
    return _options;
  }
};

function FlowTypeCleanerLoader(content) {
  return flowRemoveTypes(content, _upsertOptions()).toString();
}

FlowTypeCleanerLoader.displayName = 'FlowTypeCleanerLoader';
module.exports = FlowTypeCleanerLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3dlYnBhY2svbG9hZGVyL0Zsb3dUeXBlQ2xlYW5lci5janMiXSwibmFtZXMiOlsidmFsaWRhdGUiLCJyZXF1aXJlIiwiZmxvd1JlbW92ZVR5cGVzIiwiX3NjaGVtYSIsInR5cGUiLCJwcm9wZXJ0aWVzIiwiZXhjbHVkZSIsImluY2x1ZGUiLCJhbGwiLCJfb3B0aW9ucyIsIl91cHNlcnRPcHRpb25zIiwiZmxvd09wdGlvbnMiLCJnZXRPcHRpb25zIiwibmFtZSIsImRpc3BsYXlOYW1lIiwiYmFzZURhdGFQYXRoIiwiRmxvd1R5cGVDbGVhbmVyTG9hZGVyIiwiY29udGVudCIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBK0JBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFlQyxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNQyxlQUFlLEdBQUdELE9BQU8sQ0FBQyxtQkFBRCxDQUEvQjs7QUFFQSxNQUFNRSxPQUFPLEdBQUc7QUFDZEMsRUFBQUEsSUFBSSxFQUFFLFFBRFE7QUFFZEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLE9BQU8sRUFBRTtBQUFFRixNQUFBQSxJQUFJLEVBQUU7QUFBUixLQURDO0FBRVZHLElBQUFBLE9BQU8sRUFBRTtBQUFFSCxNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUZDO0FBR1ZJLElBQUFBLEdBQUcsRUFBRTtBQUFFSixNQUFBQSxJQUFJLEVBQUU7QUFBUjtBQUhLO0FBRkUsQ0FBaEI7QUFTQSxNQUFNSyxRQUFRLEdBQUc7QUFDZkgsRUFBQUEsT0FBTyxFQUFFLENBQUMsY0FBRCxDQURNO0FBRWZDLEVBQUFBLE9BQU8sRUFBRSxDQUFDLGNBQUQsQ0FGTTtBQUdmQyxFQUFBQSxHQUFHLEVBQUU7QUFIVSxDQUFqQjs7QUFNQSxNQUFNRSxjQUFjLEdBQUcsWUFBWTtBQUNqQyxNQUFJO0FBQ0YsVUFBTUMsV0FBVyxHQUFHLEVBQUUsR0FBR0YsUUFBTDtBQUFlLFNBQUcsS0FBS0csVUFBTCxDQUFnQlQsT0FBaEI7QUFBbEIsS0FBcEI7QUFFQUgsSUFBQUEsUUFBUSxDQUFDRyxPQUFELEVBQVVRLFdBQVYsRUFBdUI7QUFDN0JFLE1BQUFBLElBQUksRUFBRSxLQUFLQyxXQURrQjtBQUU3QkMsTUFBQUEsWUFBWSxFQUFFO0FBRmUsS0FBdkIsQ0FBUjtBQUtBLFdBQU9KLFdBQVA7QUFDRCxHQVRELENBU0UsTUFBTTtBQUFFLFdBQU9GLFFBQVA7QUFBa0I7QUFDN0IsQ0FYRDs7QUFvQkEsU0FBU08scUJBQVQsQ0FBZ0NDLE9BQWhDLEVBQXlEO0FBR3ZELFNBQU9mLGVBQWUsQ0FBQ2UsT0FBRCxFQUFVUCxjQUFjLEVBQXhCLENBQWYsQ0FBMkNRLFFBQTNDLEVBQVA7QUFDRDs7QUFFREYscUJBQXFCLENBQUNGLFdBQXRCLEdBQW9DLHVCQUFwQztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLHFCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluc3BpcmF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vY29ub3JoYXN0aW5ncy9yZW1vdmUtZmxvdy10eXBlcy1sb2FkZXJcbi8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvdHJlZS9tYWluL3BhY2thZ2VzL2Zsb3ctcmVtb3ZlLXR5cGVzXG4vLyBAc2VlIGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29udHJpYnV0ZS93cml0aW5nLWEtbG9hZGVyL1xuLy8gQHNlZSBodHRwczovL3dlYnBhY2suanMub3JnL2FwaS9sb2FkZXJzL1xuLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay9sb2FkZXItdXRpbHMvYmxvYi9tYXN0ZXIvcGFja2FnZS5qc29uXG4vLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3NjaGVtYS11dGlscy9ibG9iL21hc3Rlci9wYWNrYWdlLmpzb25cblxuXG4vLyBjb3B5cGFzdGFcbi8vIG11bHRpcGxlIGxvYWRlcnMgYXJlIGV4ZWN1dGVkIGluIHJldmVyc2Ugb3JkZXIgKHJpZ2h0PmxlZnR8Ym90dG9tPnVwKVxuLy8gVGhlIGZhY3QgdGhhdCBsb2FkZXJzIGNhbiBiZSBjaGFpbmVkIGFsc28gbWVhbnMgdGhleSBkb24ndCBuZWNlc3NhcmlseSBoYXZlIHRvIG91dHB1dCBKYXZhU2NyaXB0LiBBcyBsb25nIGFzIHRoZSBuZXh0IGxvYWRlciBpbiB0aGUgY2hhaW4gY2FuIGhhbmRsZSBpdHMgb3V0cHV0LCB0aGUgbG9hZGVyIGNhbiByZXR1cm4gYW55IHR5cGUgb2YgbW9kdWxlLlxuXG5cbi8qKiB3ZWJwYWNrIGJlc3QgbG9hZGVyIGJlc3QgcHJhY3RpY2VzXG4gICAgS2VlcCB0aGVtIHNpbXBsZS5cbiAgICBVdGlsaXplIGNoYWluaW5nLlxuICAgIEVtaXQgbW9kdWxhciBvdXRwdXQuXG4gICAgTWFrZSBzdXJlIHRoZXkncmUgc3RhdGVsZXNzLlxuICAgIEVtcGxveSBsb2FkZXIgdXRpbGl0aWVzLlxuICAgIE1hcmsgbG9hZGVyIGRlcGVuZGVuY2llcy5cbiAgICBSZXNvbHZlIG1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gICAgRXh0cmFjdCBjb21tb24gY29kZS5cbiAgICBBdm9pZCBhYnNvbHV0ZSBwYXRocy5cbiAgICBVc2UgcGVlciBkZXBlbmRlbmNpZXMuXG4qL1xuXG4vLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90YXBqcy9ub2RlLXRhcC9ibG9iL21haW4vdGVzdC90ZXN0Lm1qc1xuLy8gaW1wb3J0ICogYXMgbW9kdWxlIGZyb20gJ21vZHVsZSc7XG4vLyBjb25zdCB7IGNyZWF0ZVJlcXVpcmUgfSA9IG1vZHVsZTtcbi8vIGNvbnN0IHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybCk7XG4vLyBjb25zdCBmbG93UmVtb3ZlVHlwZXMgPSByZXF1aXJlKCdmbG93LXJlbW92ZS10eXBlcycpO1xuY29uc3QgeyB2YWxpZGF0ZSB9ID0gcmVxdWlyZSgnc2NoZW1hLXV0aWxzJyk7XG5jb25zdCBmbG93UmVtb3ZlVHlwZXMgPSByZXF1aXJlKCdmbG93LXJlbW92ZS10eXBlcycpOyAvLyBUT0RPOiB3dGYgaGFwcGVuZWQgdG8gZXNsaW50L3NvcnQtaW1wb3J0cyA/XG5cbmNvbnN0IF9zY2hlbWEgPSB7XG4gIHR5cGU6ICdvYmplY3QnLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgZXhjbHVkZTogeyB0eXBlOiAnYXJyYXknIH0sXG4gICAgaW5jbHVkZTogeyB0eXBlOiAnYXJyYXknIH0sXG4gICAgYWxsOiB7IHR5cGU6ICdib29sZWFuJyB9LFxuICB9LFxufTtcblxuY29uc3QgX29wdGlvbnMgPSB7XG4gIGV4Y2x1ZGU6IFsvbm9kZV9tb2R1bGVzL10sXG4gIGluY2x1ZGU6IFsvXFwuKGN8bXwpanN4Py9dLFxuICBhbGw6IHRydWVcbn07XG5cbmNvbnN0IF91cHNlcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGZsb3dPcHRpb25zID0geyAuLi5fb3B0aW9ucywgLi4udGhpcy5nZXRPcHRpb25zKF9zY2hlbWEpIH07XG5cbiAgICB2YWxpZGF0ZShfc2NoZW1hLCBmbG93T3B0aW9ucywge1xuICAgICAgbmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgIGJhc2VEYXRhUGF0aDogJ29wdGlvbnMnXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmxvd09wdGlvbnM7XG4gIH0gY2F0Y2ggeyByZXR1cm4gX29wdGlvbnM7IH1cbn07XG5cbi8qKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgcmVwcmVzZW50cyBjb250ZW50IG9mIHRoZSByZXNvdXJjZSBmaWxlXG4gKiBAcGFyYW0geyp9IG1hcD8gd2hlbiBtb3JlIHRoYW4gMSBsb2FkZXIgYXBwbGllZCB0byByZXNvdXJjZVxuICogQHBhcmFtIHsqfSBtZXRhPyB3aGVuIG1vcmUgdGhhbiAxIGxvYWRlciBhcHBsaWVkIHRvIHJlc291cmNlXG4gKiBAcmV0dXJuIHtzdHJpbmcsIHNvdXJjZU1hcD99XG4gKi9cbmZ1bmN0aW9uIEZsb3dUeXBlQ2xlYW5lckxvYWRlciAoY29udGVudCAvKiwgbWFwLCBtZXRhKi8pIHtcbiAgLy8gdGhpcy5jYWNoZWFibGUoKTtcblxuICByZXR1cm4gZmxvd1JlbW92ZVR5cGVzKGNvbnRlbnQsIF91cHNlcnRPcHRpb25zKCkpLnRvU3RyaW5nKCk7XG59XG5cbkZsb3dUeXBlQ2xlYW5lckxvYWRlci5kaXNwbGF5TmFtZSA9ICdGbG93VHlwZUNsZWFuZXJMb2FkZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsb3dUeXBlQ2xlYW5lckxvYWRlcjtcbiJdfQ==