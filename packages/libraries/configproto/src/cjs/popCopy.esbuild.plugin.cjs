"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.popCopy = popCopy;
exports.filesToCopy = exports.fileCopy = exports.fileShouldCopy = exports.cache = void 0;

require("core-js/modules/esnext.map.delete-all.js");

require("core-js/modules/esnext.map.every.js");

require("core-js/modules/esnext.map.filter.js");

require("core-js/modules/esnext.map.find.js");

require("core-js/modules/esnext.map.find-key.js");

require("core-js/modules/esnext.map.includes.js");

require("core-js/modules/esnext.map.key-of.js");

require("core-js/modules/esnext.map.map-keys.js");

require("core-js/modules/esnext.map.map-values.js");

require("core-js/modules/esnext.map.merge.js");

require("core-js/modules/esnext.map.reduce.js");

require("core-js/modules/esnext.map.some.js");

require("core-js/modules/esnext.map.update.js");

var _path = _interopRequireDefault(require("path"));

var _wtf = _interopRequireDefault(require("@nodeproto/wtf"));

const {
  fs
} = _wtf.default;
const cache = new Map();
exports.cache = cache;

const fileShouldCopy = async sourcepath => {
  let fd;

  try {
    fd = await fs.open(sourcepath, 'r');
    if (!fd) return;
    const {
      mtimeMs
    } = await fd.stat();
    const cacheMs = cache.get(sourcepath)?.ms;
    fd.close();
    return (!cacheMs || cacheMs < mtimeMs) && mtimeMs;
  } catch (e) {
    console.warn('error accessing file, removing from cache\n', {
      sourcepath,
      e
    });
    fd?.close();
    cache.delete(sourcepath);
    return false;
  }
};

exports.fileShouldCopy = fileShouldCopy;

const fileCopy = async (newCacheMs, sourcepath, outdir) => {
  try {
    if (newCacheMs) {
      const outpath = `${outdir}/${_path.default.basename(sourcepath)}`;
      cache.set(sourcepath, {
        ms: newCacheMs,
        outpath
      });
      await fs.mkdir(outdir, {
        recursive: true
      });
      await fs.copyFile(sourcepath, outpath);
    }
  } catch (e) {
    cache.delete(sourcepath);
    console.warn('\n\n error copying file into outdir', {
      sourcepath,
      e
    });
  }
};

exports.fileCopy = fileCopy;

const filesToCopy = options => {
  const msg = 'not copying files:';

  if (!options.length) {
    return console.warn(`${msg} options empty`, options);
  }

  options.forEach(async ({
    outdir,
    endingWith,
    indir,
    recurse,
    ...opts
  }) => {
    try {
      if (!(endingWith instanceof RegExp) || !indir || !indir.startsWith('/') || !outdir || !outdir.startsWith('/')) {
        return console.warn(`${msg} invalid params`, {
          outdir,
          endingWith,
          indir,
          recurse,
          opts
        });
      }

      const sourcedirs = (await fs.readdir(indir, {
        encoding: 'utf8',
        withFileTypes: true
      })) ?? [];
      sourcedirs.forEach(dirEnt => {
        if (!dirEnt.name.includes('.') && recurse) {
          filesToCopy([{
            outdir,
            endingWith,
            recurse,
            indir: `${indir}/${dirEnt.name}`,
            ...opts
          }]);
        } else {
          if (endingWith.test(dirEnt.name)) {
            const sourcepath = `${indir}/${dirEnt.name}`;
            const outpath = `${outdir}/${dirEnt.name}`;
            cache.set(sourcepath, {
              ms: null,
              outpath
            });
          }
        }
      });
    } catch (e) {
      console.error('\n\n error in popcopy', e);
    }
  });
};

exports.filesToCopy = filesToCopy;
const name = 'popCopyPlugin';

function popCopy(config) {
  popCopy.options = config;
  popCopy.onStarted = false;
  return {
    name,

    setup(build) {
      const {
        options
      } = popCopy.options ?? {};
      if (!options) return;
      filesToCopy(options);
      build.onResolve({
        filter: /^popcopy$/
      }, () => ({}));
      build.onStart(async () => {
        if (popCopy.onStarted) return;
        popCopy.onStarted = true;

        if (cache.size) {
          for (const [sourcepath, {
            ms,
            outpath
          }] of cache) {
            try {
              const newCacheMs = await fileShouldCopy(sourcepath);

              if (newCacheMs) {
                await fileCopy(newCacheMs, sourcepath, _path.default.dirname(outpath));
              }
            } catch (e) {
              console.warn('popCopy.onStart error', e);
            }
          }
        }
      });
      build.onEnd(result => {
        popCopy.onStarted = false;
      });
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,