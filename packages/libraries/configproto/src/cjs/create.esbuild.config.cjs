"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.createEsbuildConfig = createEsbuildConfig;

var _esbuildPluginManifest = _interopRequireDefault(require("esbuild-plugin-manifest"));

var envproto = _interopRequireDefault(require("@nodeproto/envproto"));

const r = (t, msg = 'is required') => {
  throw new Error(`${t}: ${msg}`);
};

function createEsbuildConfig({
  entry = r('entry: string'),
  outdir = r('outdir: string'),
  pkgJson = r('pkgJson: json'),
  assetNames = 'assets/[name]-[hash]',
  builtinModules = [],
  bundle = true,
  isBuild = process.env.IS_BUILD,
  isDev = process.env.NODE_ENV !== 'production',
  isProd = !isDev,
  manifestFilename = 'manifest.json',
  metafile = true,
  outExtension = {
    '.js': '.cjs'
  },
  platform = 'node',
  plugins = [],
  replaceEntryVars = {},
  resolveExtensions = ['.mjs', '.js', '.cjs', '.json'],
  sourcemap = true,
  target = ['node14.17.0'],
  watch = false,
  bff = false,
  write = true,
  entryNames = isDev ? '[name]-[hash]' : '[name]',
  minify = isProd,
  ...overrides
}) {
  const lastPeriod = entry.lastIndexOf('.');
  const appInputFilename = entry.slice(0, lastPeriod);
  const appExtension = entry.slice(lastPeriod);
  const manifestUri = outdir + '/' + manifestFilename;
  const define = { ...envproto.syncEnvWithConfig(pkgJson).processEnv,
    ...replaceEntryVars
  };
  const manifestPluginConfig = {
    extensionless: 'input',
    filename: manifestFilename,
    hash: isProd,
    shortNames: false
  };
  return {
    assetNames,
    bundle,
    define,
    entryNames,
    entryPoints: [entry],
    external: builtinModules,
    metafile,
    minify,
    outdir,
    outExtension,
    platform,
    plugins: plugins.concat((0, _esbuildPluginManifest.default)(manifestPluginConfig)),
    resolveExtensions,
    sourcemap,
    target,
    watch: false,
    write,
    ...overrides
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzYnVpbGQvY3JlYXRlLmVzYnVpbGQuY29uZmlnLm1qcyJdLCJuYW1lcyI6WyJyIiwidCIsIm1zZyIsIkVycm9yIiwiY3JlYXRlRXNidWlsZENvbmZpZyIsImVudHJ5Iiwib3V0ZGlyIiwicGtnSnNvbiIsImFzc2V0TmFtZXMiLCJidWlsdGluTW9kdWxlcyIsImJ1bmRsZSIsImlzQnVpbGQiLCJwcm9jZXNzIiwiZW52IiwiSVNfQlVJTEQiLCJpc0RldiIsIk5PREVfRU5WIiwiaXNQcm9kIiwibWFuaWZlc3RGaWxlbmFtZSIsIm1ldGFmaWxlIiwib3V0RXh0ZW5zaW9uIiwicGxhdGZvcm0iLCJwbHVnaW5zIiwicmVwbGFjZUVudHJ5VmFycyIsInJlc29sdmVFeHRlbnNpb25zIiwic291cmNlbWFwIiwidGFyZ2V0Iiwid2F0Y2giLCJiZmYiLCJ3cml0ZSIsImVudHJ5TmFtZXMiLCJtaW5pZnkiLCJvdmVycmlkZXMiLCJsYXN0UGVyaW9kIiwibGFzdEluZGV4T2YiLCJhcHBJbnB1dEZpbGVuYW1lIiwic2xpY2UiLCJhcHBFeHRlbnNpb24iLCJtYW5pZmVzdFVyaSIsImRlZmluZSIsImVudnByb3RvIiwic3luY0VudldpdGhDb25maWciLCJwcm9jZXNzRW52IiwibWFuaWZlc3RQbHVnaW5Db25maWciLCJleHRlbnNpb25sZXNzIiwiZmlsZW5hbWUiLCJoYXNoIiwic2hvcnROYW1lcyIsImVudHJ5UG9pbnRzIiwiZXh0ZXJuYWwiLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFJQyxHQUFHLEdBQUcsYUFBVixLQUE0QjtBQUFFLFFBQU0sSUFBSUMsS0FBSixDQUFXLEdBQUVGLENBQUUsS0FBSUMsR0FBSSxFQUF2QixDQUFOO0FBQWdDLENBQXhFOztBQUVPLFNBQVNFLG1CQUFULENBQThCO0FBQ25DQyxFQUFBQSxLQUFLLEdBQUdMLENBQUMsQ0FBQyxlQUFELENBRDBCO0FBRW5DTSxFQUFBQSxNQUFNLEdBQUdOLENBQUMsQ0FBQyxnQkFBRCxDQUZ5QjtBQUduQ08sRUFBQUEsT0FBTyxHQUFHUCxDQUFDLENBQUMsZUFBRCxDQUh3QjtBQU1uQ1EsRUFBQUEsVUFBVSxHQUFHLHNCQU5zQjtBQU9uQ0MsRUFBQUEsY0FBYyxHQUFHLEVBUGtCO0FBUW5DQyxFQUFBQSxNQUFNLEdBQUcsSUFSMEI7QUFTbkNDLEVBQUFBLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBVGE7QUFVbkNDLEVBQUFBLEtBQUssR0FBR0gsT0FBTyxDQUFDQyxHQUFSLENBQVlHLFFBQVosS0FBeUIsWUFWRTtBQVduQ0MsRUFBQUEsTUFBTSxHQUFHLENBQUNGLEtBWHlCO0FBWW5DRyxFQUFBQSxnQkFBZ0IsR0FBRyxlQVpnQjtBQWFuQ0MsRUFBQUEsUUFBUSxHQUFHLElBYndCO0FBY25DQyxFQUFBQSxZQUFZLEdBQUc7QUFBRSxXQUFPO0FBQVQsR0Fkb0I7QUFlbkNDLEVBQUFBLFFBQVEsR0FBRyxNQWZ3QjtBQWdCbkNDLEVBQUFBLE9BQU8sR0FBRyxFQWhCeUI7QUFpQm5DQyxFQUFBQSxnQkFBZ0IsR0FBRyxFQWpCZ0I7QUFrQm5DQyxFQUFBQSxpQkFBaUIsR0FBRyxDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLE1BQWhCLEVBQXdCLE9BQXhCLENBbEJlO0FBbUJuQ0MsRUFBQUEsU0FBUyxHQUFHLElBbkJ1QjtBQW9CbkNDLEVBQUFBLE1BQU0sR0FBRyxDQUFDLGFBQUQsQ0FwQjBCO0FBcUJuQ0MsRUFBQUEsS0FBSyxHQUFHLEtBckIyQjtBQXNCbkNDLEVBQUFBLEdBQUcsR0FBRyxLQXRCNkI7QUF1Qm5DQyxFQUFBQSxLQUFLLEdBQUcsSUF2QjJCO0FBMEJuQ0MsRUFBQUEsVUFBVSxHQUFHZixLQUFLLEdBQUcsZUFBSCxHQUFxQixRQTFCSjtBQTJCbkNnQixFQUFBQSxNQUFNLEdBQUdkLE1BM0IwQjtBQTZCbkMsS0FBR2U7QUE3QmdDLENBQTlCLEVBOEJKO0FBQ0QsUUFBTUMsVUFBVSxHQUFHNUIsS0FBSyxDQUFDNkIsV0FBTixDQUFrQixHQUFsQixDQUFuQjtBQUNBLFFBQU1DLGdCQUFnQixHQUFHOUIsS0FBSyxDQUFDK0IsS0FBTixDQUFZLENBQVosRUFBZUgsVUFBZixDQUF6QjtBQUNBLFFBQU1JLFlBQVksR0FBR2hDLEtBQUssQ0FBQytCLEtBQU4sQ0FBWUgsVUFBWixDQUFyQjtBQUNBLFFBQU1LLFdBQVcsR0FBR2hDLE1BQU0sR0FBRyxHQUFULEdBQWVZLGdCQUFuQztBQUVBLFFBQU1xQixNQUFNLEdBQUcsRUFDYixHQUFHQyxRQUFRLENBQUNDLGlCQUFULENBQTJCbEMsT0FBM0IsRUFBb0NtQyxVQUQxQjtBQUViLE9BQUduQjtBQUZVLEdBQWY7QUFLQSxRQUFNb0Isb0JBQW9CLEdBQUc7QUFDM0JDLElBQUFBLGFBQWEsRUFBRSxPQURZO0FBRTNCQyxJQUFBQSxRQUFRLEVBQUUzQixnQkFGaUI7QUFHM0I0QixJQUFBQSxJQUFJLEVBQUU3QixNQUhxQjtBQUkzQjhCLElBQUFBLFVBQVUsRUFBRTtBQUplLEdBQTdCO0FBT0EsU0FBTztBQUNMdkMsSUFBQUEsVUFESztBQUVMRSxJQUFBQSxNQUZLO0FBR0w2QixJQUFBQSxNQUhLO0FBSUxULElBQUFBLFVBSks7QUFLTGtCLElBQUFBLFdBQVcsRUFBRSxDQUFDM0MsS0FBRCxDQUxSO0FBTUw0QyxJQUFBQSxRQUFRLEVBQUV4QyxjQU5MO0FBT0xVLElBQUFBLFFBUEs7QUFRTFksSUFBQUEsTUFSSztBQVNMekIsSUFBQUEsTUFUSztBQVVMYyxJQUFBQSxZQVZLO0FBV0xDLElBQUFBLFFBWEs7QUFZTEMsSUFBQUEsT0FBTyxFQUFFQSxPQUFPLENBQUM0QixNQUFSLENBQ1Asb0NBQWVQLG9CQUFmLENBRE8sQ0FaSjtBQWVMbkIsSUFBQUEsaUJBZks7QUFnQkxDLElBQUFBLFNBaEJLO0FBaUJMQyxJQUFBQSxNQWpCSztBQWtCTEMsSUFBQUEsS0FBSyxFQUFFLEtBbEJGO0FBbUJMRSxJQUFBQSxLQW5CSztBQXFCTCxPQUFHRztBQXJCRSxHQUFQO0FBdUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hbmlmZXN0UGx1Z2luIGZyb20gJ2VzYnVpbGQtcGx1Z2luLW1hbmlmZXN0JztcbmltcG9ydCAqIGFzIGVudnByb3RvIGZyb20gJ0Bub2RlcHJvdG8vZW52cHJvdG8nO1xuXG5jb25zdCByID0gKHQsIG1zZyA9ICdpcyByZXF1aXJlZCcpID0+IHsgdGhyb3cgbmV3IEVycm9yKGAke3R9OiAke21zZ31gKX07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFc2J1aWxkQ29uZmlnICh7XG4gIGVudHJ5ID0gcignZW50cnk6IHN0cmluZycpLFxuICBvdXRkaXIgPSByKCdvdXRkaXI6IHN0cmluZycpLCAvLyBmc3Byb3RvLnJlc29sdmUoJ2Rpc3QnKVxuICBwa2dKc29uID0gcigncGtnSnNvbjoganNvbicpLFxuXG4gIC8vIGRlZmF1bHRzXG4gIGFzc2V0TmFtZXMgPSAnYXNzZXRzL1tuYW1lXS1baGFzaF0nLFxuICBidWlsdGluTW9kdWxlcyA9IFtdLCAvLyBpbXBvcnQgeyBidWlsdGluTW9kdWxlcyB9IGZyb20gJ21vZHVsZSc7XG4gIGJ1bmRsZSA9IHRydWUsXG4gIGlzQnVpbGQgPSBwcm9jZXNzLmVudi5JU19CVUlMRCxcbiAgaXNEZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuICBpc1Byb2QgPSAhaXNEZXYsXG4gIG1hbmlmZXN0RmlsZW5hbWUgPSAnbWFuaWZlc3QuanNvbicsXG4gIG1ldGFmaWxlID0gdHJ1ZSxcbiAgb3V0RXh0ZW5zaW9uID0geyAnLmpzJzogJy5janMnIH0sXG4gIHBsYXRmb3JtID0gJ25vZGUnLFxuICBwbHVnaW5zID0gWy8qcG9wQ29weShwb3BDb3B5Q29uZmlnKSwqL10sXG4gIHJlcGxhY2VFbnRyeVZhcnMgPSB7fSwgLy8gcGFzc2VkIHRvIGRlZmluZVxuICByZXNvbHZlRXh0ZW5zaW9ucyA9IFsnLm1qcycsICcuanMnLCAnLmNqcycsICcuanNvbiddLFxuICBzb3VyY2VtYXAgPSB0cnVlLFxuICB0YXJnZXQgPSBbJ25vZGUxNC4xNy4wJ10sIC8vIExUU1xuICB3YXRjaCA9IGZhbHNlLFxuICBiZmYgPSBmYWxzZSwgLy8gc3RhcnRzIHNlcnZlclxuICB3cml0ZSA9IHRydWUsXG5cbiAgLy8gZGVwZW5kZW50XG4gIGVudHJ5TmFtZXMgPSBpc0RldiA/ICdbbmFtZV0tW2hhc2hdJyA6ICdbbmFtZV0nLFxuICBtaW5pZnkgPSBpc1Byb2QsXG5cbiAgLi4ub3ZlcnJpZGVzXG59KSB7XG4gIGNvbnN0IGxhc3RQZXJpb2QgPSBlbnRyeS5sYXN0SW5kZXhPZignLicpO1xuICBjb25zdCBhcHBJbnB1dEZpbGVuYW1lID0gZW50cnkuc2xpY2UoMCwgbGFzdFBlcmlvZCk7XG4gIGNvbnN0IGFwcEV4dGVuc2lvbiA9IGVudHJ5LnNsaWNlKGxhc3RQZXJpb2QpO1xuICBjb25zdCBtYW5pZmVzdFVyaSA9IG91dGRpciArICcvJyArIG1hbmlmZXN0RmlsZW5hbWU7XG5cbiAgY29uc3QgZGVmaW5lID0ge1xuICAgIC4uLmVudnByb3RvLnN5bmNFbnZXaXRoQ29uZmlnKHBrZ0pzb24pLnByb2Nlc3NFbnYsXG4gICAgLi4ucmVwbGFjZUVudHJ5VmFyc1xuICB9O1xuXG4gIGNvbnN0IG1hbmlmZXN0UGx1Z2luQ29uZmlnID0ge1xuICAgIGV4dGVuc2lvbmxlc3M6ICdpbnB1dCcsXG4gICAgZmlsZW5hbWU6IG1hbmlmZXN0RmlsZW5hbWUsXG4gICAgaGFzaDogaXNQcm9kLFxuICAgIHNob3J0TmFtZXM6IGZhbHNlLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYXNzZXROYW1lcyxcbiAgICBidW5kbGUsXG4gICAgZGVmaW5lLFxuICAgIGVudHJ5TmFtZXMsXG4gICAgZW50cnlQb2ludHM6IFtlbnRyeV0sXG4gICAgZXh0ZXJuYWw6IGJ1aWx0aW5Nb2R1bGVzLFxuICAgIG1ldGFmaWxlLFxuICAgIG1pbmlmeSxcbiAgICBvdXRkaXIsXG4gICAgb3V0RXh0ZW5zaW9uLFxuICAgIHBsYXRmb3JtLFxuICAgIHBsdWdpbnM6IHBsdWdpbnMuY29uY2F0KFxuICAgICAgbWFuaWZlc3RQbHVnaW4obWFuaWZlc3RQbHVnaW5Db25maWcpLFxuICAgICksXG4gICAgcmVzb2x2ZUV4dGVuc2lvbnMsXG4gICAgc291cmNlbWFwLFxuICAgIHRhcmdldCxcbiAgICB3YXRjaDogZmFsc2UsXG4gICAgd3JpdGUsXG5cbiAgICAuLi5vdmVycmlkZXNcbiAgfTtcbn1cbiJdfQ==