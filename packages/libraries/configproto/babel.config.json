/**
  * base.babelrc
  * you generally want to extend from either [client|node|ssr].babelrc
  * when transpiling for the browser, you need a module loader, we use webpack
  * @see https://stackoverflow.com/questions/31593694/do-i-need-require-js-when-i-use-babel

  * babel ordering is important, thus
  - @see https://babeljs.io/docs/en/options#entryoptions
  - we set all plugin options here, some of them whose config is set to false
  - this enables you to
    - specify their options in overrides/test/etc sections and add the relevant plugin/preset config
    - ensure they are still executed where they ar edefind in this file (in the appropriate plugin/preset order)

  useful options for consumers that extend our babelrc files
  @see node.babelrc & client.babelrc
    babelrc
    babelrcRoots
    targets: only set if not using browserslist (you shuld use browserslist)
    targets.esmodules - if supporting browsers.script.type=module
    browserslistConfigFile:
    browserslistEnv:
    overrides
 */
{
  // simple options
  "browserslistConfigFile": ".browserslistrc",
  "browserslistEnv": "production",
  "highlightCode": true,
  "sourceMaps": true,
  "sourceType": "module",
  // complex options
  // use assumptions whenever possible
  // @see https://babeljs.io/docs/en/assumptions
  // @see https://github.com/babel/rfcs/blob/master/rfcs/0003-top-level-assumptions.md
  // replaces the loose options in plugins as
  // this applies to all plugins that support lose
  // we generally chose the option that produces the least amount of output
  "assumptions": {
    "arrayLikeIsIterable": true,
    "constantReexports": true,
    "constantSuper": true,
    "enumerableModuleMeta": true,
    "ignoreFunctionLength": true,
    "ignoreToPrimitiveHint": true,
    "iterableIsArray": false, // we heavily use maps & sets
    "mutableTemplateObject": true,
    "noClassCalls": true,
    "noDocumentAll": true,
    "noIncompleteNsImportDetection": true,
    "noNewArrows": true,
    "objectRestNoSymbols": true,
    "privateFieldsAsProperties": true,
    "pureGetters": true,
    "setClassMethods": false,
    "setComputedProperties": false,
    "setPublicClassFields": false,
    "setSpreadProperties": false,
    "skipForOfIteratorClosing": true,
    "superIsCallableConstructor": true // disallow extending native classes
  },
  "env": {
    "production": {
      "highlightCode": false,
      "minified": true, // includes compact: true
      "comments": false
    }
  },
  "generatorOpts": {
    "comments": true,
    "compact": false,
    "minified": false,
    "retainLines": false
    // never enable these; use a plugin instead
    // "auxiliaryCommentBefore"
    // auxiliaryCommentAfter
    // shouldPrintComment
  },
  "ignore": [
    "**/dist",
    "**/*.test.mjs",
    "**/*.test.cjs"
  ],
  // TODO: these simple overrides doenst seem to be working
  // @see packages/libraries/configproto/babel/client.babelonly.babelrc
  // ^ comment the sourcetype module in that file
  // ^ run packages/tests -> pnpm test:configproto:babel:copypasta
  "overrides": [
    {
      // all commonjs options
      "test": "**/*.cjs$",
      // This option will not affect parsing of .mjs files, as they are currently hard-coded to always parse as "module" files.
      "sourceType": "script"
    },
    {
      "test": [
        "**/*.mjs$",
        "**/*.jsx$"
      ],
      "sourceType": "module"
    },
    {
      // interprets as module if import/export exists
      "test": "**/*.js$",
      "sourceType": "unambiguous"
    }
  ],
  "parserOpts": {
    "allowAwaitOutsideFunction": true,
    "allowImportExportEverywhere": false,
    "allowReturnOutsideFunction": true,
    "allowSuperOutsideMethod": false,
    "allowUndeclaredExports": true,
    "attachComment": false,
    "errorRecovery": false,
    "strict": true,
    // "sourceType": "unambiguous",
    // When a plugin is specified multiple times, only the first options are considered.
    "plugins": [
      // @see https://babeljs.io/docs/en/plugins/
      "asyncDoExpressions",
      [
        "decorators",
        {
          "decoratorsBeforeExport": true
        }
      ],
      "doExpressions",
      "exportDefaultFrom",
      "flowComments",
      "functionBind",
      "importAssertions",
      "moduleBlocks",
      "partialApplication",
      [
        // @see https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
        "pipelineOperator",
        {
          "proposal": "fsharp"
        }
      ],
      "privateIn",
      [
        // @see https://github.com/tc39/proposal-record-tuple/issues/10
        "recordAndTuple",
        {
          "syntaxType": "bar"
        }
      ],
      "throwExpressions",
      "topLevelAwait"
    ]
  },

  "plugins": [
    [
      "@emotion",
      false
    ],
    "transform-export-default-name",
    // "transform-flow-strip-types",
    [
      "@babel/plugin-transform-runtime",
      {
        "corejs": false,
        // using absolute paths is not desirable if files are compiled for use at a later time, but in contexts where a file is compiled and then immediately consumed, they can be quite helpful.
        "absoluteRuntime": false,
        "helpers": true,
        "regenerator": true,
        "version": "7.17.0"
      }
    ],
    "@babel/plugin-proposal-throw-expressions",
    // TODO: test if other presets handle this automatically
    // ["@babel/plugin-transform-modules-commonjs", false],
    "tailcall-optimization",
    [
      "@babel/plugin-transform-react-constant-elements",
      false
    ],
    [
      "@babel/plugin-transform-react-inline-elements",
      false
    ]
  ],

  // @see https://babeljs.io/docs/en/babel-preset-env
  // @babel/preset-env won't include any JavaScript syntax proposals less than Stage 3
  // setting shippedProposals: true will include the limited set of stage 3 proposals implemented by browsers
  // modules: "amd" | "umd" | "systemjs" | "commonjs" | "cjs" | "auto" | false, defaults to "auto".
  // ^ set output type
  // ^ @see https://github.com/babel/babel/issues/8887
  "presets": [
    [
      "@babel/preset-env",
      false
    ],
    [
      "@babel/preset-react",
      false
    ],
    [
      "@babel/preset-flow",
      {
        "all": false,
        "allowDeclareFields": true
      }
    ]
  ]
}
