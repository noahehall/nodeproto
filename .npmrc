; @see https://en.wikipedia.org/wiki/INI_file
; @see https://pnpm.io/npmrc
; @see https://pnpm.io/workspaces
; @see https://yarnpkg.com/features/pnp
; @see https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; opinions
; ^ everything should be in ~/.nodeproto
; ^^ feel free to change to the name of your thing
; ^ there is an optimial degree of efficiency vs effectiveness
; ^^ sometimes you sacrifice speed for stability

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; the following settings impact virtualization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; hoisting settings ;;;;;;;;;;;;;;;;;;;;
; all local build dependencies
hoist = true
; hoist all packages
hoist-pattern = ['*']
; unused; but will hoist to the root of node_modules instead of the virtual-store
; public-hoist-pattern[] = *eslint*
; public-hoist-pattern[] = *webpack*
; public-hoist-pattern[] = *babel*
; public-hoist-pattern[] = *flow*
; force hoist all packages to the root of node_modules
shamefully-hoist = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; dependency settings ;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; where global packages are installed
global-dir = /var/.nodeproto/pnpm-global
; where to store global package bin files
global-bin-dir = /var/.nodeproto/pnpm-global/bin
; used by the update checker
state-dir = /var/.nodeproto/pnpm
; location of pacakge metadata cache
cache-dir = /var/.nodeproto/pnpm
; where all packages are saved on disk
; .pnpm-store
store-dir = /var/.nodeproto/.pnpm-store
; see modules-dir
enable-modules-dir = true
; where dependencies will be installed
; dont fkn use a path starting with ~ for modules-dir
modules-dir = node_modules
; all (in)direct dependencies are linked into this dir
; todo: see if we can put this in /var
virtual-store-dir = node_modules/.pnpm
; use yarn pnp - in fact dont use yarn pnp (lol)
; pnp hardcodes the path to dependencies; which i need to verify if it translates across boundaries
; node-linker = pnp
; must be false for pnp
; throws err if false: Error: Cannot find module 'node-stream-zip'
symlink = true
; how packags are imported from the store
; auto|hardlink|copy|clone
; i've had problems with clone + react message format or one of hte react related packages
package-import-method = copy
;48 hours in minutes; delete orphan packages
modules-cache-max-age = 2880

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; lockfile settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
lockfile = true
; if the lockfile satisfied package.json dependencies
; pnpm skips depenceny resolution for speedier installation
prefer-frozen-lockfile = true

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; registry settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TODO: we should always use the github registry
; as you dont know wtf you're downloading from npm
always-auth = false
; https://registry.npmjs.org/
; registry = https://npm.pkg.github.com/
; you could change this to @babel and force babel to download from github
; this forces resolution of packages i've personally forked
; to be retrieved from github regardless of what the registry setting is above
@noahehall:registry=https://npm.pkg.github.com/
save-exact = true
fetch-retries = 0
fetch-retry-maxtimeout = 60000
fetch-retry-mintimeout = 10000
fetch-timeout = 60000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pnpm workspace
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
link-workspace-packages = true
prefer-workspace-packages = true
shared-workspace-lockfile = true
save-workspace-protocol = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; the following settings do (should) not impact virtualization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pnpm cli settings ;;;;;;;;;;;;;;;;;;;;
color = auto
loglevel = info
strict-peer-dependencies = false
use-beta-cli = true
; always install for every package, not just the current on
recursive-install = true
engine-strict = false
child-concurrency = 16
; let pnpm set this dynamically
; unsafe-perm = false
; use-running-store-server = false
tag = latest
; pnpm will pick up path from nvm install location
;gobal-dir
; pnpm will pick up version installed via nvm
;use-node-version
use-stderr = false
; testing these CLI options can be set via config
prefer-offline = true
